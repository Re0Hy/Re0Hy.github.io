<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>KCTF_北冥神功</title>
      <link href="/2021/09/11/KCTF_%E5%8C%97%E5%86%A5%E7%A5%9E%E5%8A%9F/"/>
      <url>/2021/09/11/KCTF_%E5%8C%97%E5%86%A5%E7%A5%9E%E5%8A%9F/</url>
      
        <content type="html"><![CDATA[<p>一道迷宫题，核心内容:</p><pre class=" language-C"><code class="language-C">LABEL_11:          v7 = (v4 + v5 / 6) % 6;               // v5为下标          v8 = v5 + v4;          count = v22;                          // 初始为0          v20 = v7;          v10 = 5 - v8 % 6;                     // 5-(v5+v4)%6          for ( i = 0; ; i = 1 )                // 奇偶交替          {            switch ( v10 )            {              case 1:                ++count;                break;              case 2:                v17 = (I++ & 1) == 0;           // 偶数1,奇数0                count += v17;                break;              case 3:                v12 = (I++ & 1) != 0;           // 偶数0,奇数1                count -= v12;                break;              case 4:                --count;                break;              case 5:                v19 = (I-- & 1) != 0;                count -= v19;                break;              default:                v18 = (I-- & 1) == 0;                count += v18;                break;            }            if ( count > 9 )              break;            if ( I > 8 )              break;            v13 = &aS_1[10 * I + count];            if ( *v13 )              break;            *v13 = 1;            if ( i == 1 )            {              ++v4;              v22 = count;              v3 = v25[v4];              if ( v3 )                goto LABEL_4;              goto LABEL_19;            }            v10 = v20;          }        }        else        {          while ( v24 != ++v5 )          {            if ( byte_4B7040[v5] == v3 )              goto LABEL_11;          }        }      }    }</code></pre><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210911155935245.png" alt="image-20210911155935245"></p><p>确定迷宫样子:10*9,并且会将走过的0转换成1:</p><pre><code>S 0 1 0 0 1 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 1 0 0 1 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 1 1 1 1 0 1 1 1 0 1 0 1 0 0 1 1 1 1 0 1 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 0 1 1 0 0 </code></pre><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210911155616914.png" alt="image-20210911155616914"></p><p>要打印<code>Good job!</code>，就需要迷宫中没有0，再看迷宫走法:</p><pre class=" language-C"><code class="language-C">         for ( i = 0; ; i = 1 )                // 奇偶交替          {            switch ( v10 )            {              case 1:                ++count;                break;              case 2:                v17 = (I++ & 1) == 0;           // 偶数1,奇数0                count += v17;                break;              case 3:                v12 = (I++ & 1) != 0;           // 偶数0,奇数1                count -= v12;                break;              case 4:                --count;                break;              case 5:                v19 = (I-- & 1) != 0;                count -= v19;                break;              default:                v18 = (I-- & 1) == 0;                count += v18;                break;            }</code></pre><p>很奇妙，刚开始看这里有点蒙，但是结合后面代码，确定个个数字之间代表的含义:</p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>0</th></tr></thead><tbody><tr><td>奇数</td><td>右→</td><td>下↓</td><td>左下↙</td><td>左←</td><td>左上↖</td><td>上↑</td></tr><tr><td>偶数</td><td>右→</td><td>右下↘</td><td>下↓</td><td>左←</td><td>上↑</td><td>右上↗</td></tr></tbody></table><p>获得走法:</p><pre><code>1,2,3,4,3,2,1,2,3,4,3,2,1,1,0,1,2,1,0,0,5,0,5,4,3,4,5,0,5,0,1,2,1,0,1,2,1,2,3,4,3,2,2,3,2,1</code></pre><p>逆推输入的值，很容易发现，两两一对，其中奇数位会影响到偶数位，而奇数位只受自己影响，可以根据这个条件，写解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> IncrementalNewlineDecoder<span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>str_arr<span class="token operator">=</span><span class="token string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>odd<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>even<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>flag<span class="token operator">=</span><span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token string">"%d"</span> <span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>s<span class="token operator">=</span>Solver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">-</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span>odd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span>even<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">,</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>len<span class="token punctuation">(</span>str_arr<span class="token punctuation">)</span><span class="token punctuation">)</span>tmp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>sat<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token operator">=</span>s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre><p>获得flag:</p><pre class=" language-python"><code class="language-python">GJ0V4LA4VKEVQZSVCNGJ00N</code></pre>]]></content>
      
      
      <categories>
          
          <category> re复现清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re复现清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题</title>
      <link href="/2021/09/10/%E6%96%87%E4%BB%B6%E5%90%8D/"/>
      <url>/2021/09/10/%E6%96%87%E4%BB%B6%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>Hexo+Github博客搭建教程</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    开始学习技术的时候，就有很多师傅推荐搭建博客，但是一直没开始搭建博客（就是因为穷。后来机缘巧合之下打听到可以用<code>Hexo</code>+<code>Github</code>免费搭建博客，最后只需要出购买域名的钱，再一次有了搭建博客的想法。</p><p>把第一次搭建博客过程记录下来。</p><p><strong>以下仅为 Windows10 下搭建博客流程。</strong></p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li><p>获取搭建博客所需要的工具</p></li><li><p>本地生成博客内容</p></li><li><p>定值个性化博客  matery主题</p></li><li><p>将博客发表到互联网上</p></li></ul><h1 id="第一部分-获取搭建博客所需要的工具"><a href="#第一部分-获取搭建博客所需要的工具" class="headerlink" title="第一部分 获取搭建博客所需要的工具"></a>第一部分 获取搭建博客所需要的工具</h1><p>搭建过程中，我们总共需要如下工具：</p><ul><li><p><strong>Git</strong></p><p>下载地址:  <a href="https://git-scm.com/download">Git下载</a></p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909201708255.png" alt="image-20210909201708255"></p><p>下载完成后，运行程序，一直确定next就行。安装完成后，鼠标右击，会发现多了两个快捷键。</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909201343934.png" alt="image-20210909201343934"></p><p>在搭建过程中，我们会需要用到第二个操作。更多关于Git知识，参照<a href="https://www.jianshu.com/p/36342812cd3a">Git 使用笔记</a>。</p></li><li><p><strong>Node.js</strong></p><p>下载地址: <a href="http://nodejs.cn/download/">Node.js下载</a></p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909201900753.png" alt="image-20210909201900753"></p><p>下载完成后，运行程序，同理一直next就行。</p><p>安装完成后，可以打开<code>cmd</code>或者<code>Git Bash Here</code>，进行检测是否安装成功：</p><pre class=" language-bash"><code class="language-bash">node -v      <span class="token function">npm</span> -v</code></pre><p>显示版本说明安装成功。</p></li><li><p><strong>Hexo</strong></p><p>保证前面两个工具安装成功后，鼠标右击，打开<code>cmd</code>，输入如下代码用于安装<code>hexo</code>:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>中间过程可能会有报错，可以忽略。尝试能否查看版本号:</p><pre class=" language-bash"><code class="language-bash">hexo -v</code></pre><p>显示版本号就说明安装成功。</p><p>我们接下来可能需要用到的相关指令:</p><pre class=" language-bash"><code class="language-bash">hexo init  --<span class="token operator">></span>初始化bloghexo clean --<span class="token operator">></span>清楚之前生成的东西hexo g  <span class="token operator">==</span> hexo generate  --<span class="token operator">></span> 生成静态文章<span class="token punctuation">(</span>建议用缩写<span class="token punctuation">)</span>hexo d  <span class="token operator">==</span> hexo deploy    --<span class="token operator">></span> 部署文章,用于上传本地博客内容<span class="token punctuation">(</span>建议缩写<span class="token punctuation">)</span>hexo new <span class="token string">""</span>   --<span class="token operator">></span>创建blog文章hexo new page <span class="token string">""</span>  --<span class="token operator">></span>创建blog页</code></pre></li><li><p><strong>GitHub</strong></p><p>注册一个<code>GitHub</code>账号，记录用户名，账号，密码。后续可能会要求提供这些相关信息。</p></li></ul><h1 id="第二部分-本地生成博客内容"><a href="#第二部分-本地生成博客内容" class="headerlink" title="第二部分 本地生成博客内容"></a>第二部分 本地生成博客内容</h1><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p><strong>初始化博客内容</strong></p><ul><li><p>创建一个空文档（名字任意），用于保存blog内容。</p><p>鼠标右击该文档，打开<code>Git Bash Here</code> ，初始化博客内容</p><pre class=" language-bash"><code class="language-bash">hexo init </code></pre><p>忽视初始化过程中发出的警报。</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909204704094.png" alt="image-20210909204704094"></p><p>安装必备的组件：</p><pre><code>npm install</code></pre><p>一般完成后，该目录下应该会有如下文件/文件夹</p><ul><li><code>node_modules:</code> 依赖包</li></ul><ul><li><code>public：</code>存放生成的页面</li><li><code>scaffolds：</code>生成文章的一些模板</li><li><code>source：</code>用来存放你的文章</li><li><code>themes：</code>主题</li><li><code>_config.yml:</code> 博客的配置文件</li></ul></li></ul><p><strong>访问本地博客</strong></p><ul><li><p>使用指令:</p><pre><code>hexo ghexo s</code></pre><p>完成后，会显示一个网址:<a href="http://localhost:4000/,%E7%82%B9%E5%87%BB%E8%BF%9B%E5%8E%BB%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2">http://localhost:4000/,点击进去，就会出现一个本地博客</a></p></li></ul><h2 id="脚本Front-matter-上传"><a href="#脚本Front-matter-上传" class="headerlink" title="脚本Front-matter+上传"></a>脚本Front-matter+上传</h2><p>文章均保存在主目录<code>source/_posts</code>中，默认为<code>md</code>文件，并且文件前面需要添加<code>Front-matter </code>信息，有关信息如下:</p><ul><li><code>title</code>:<code>Markdown</code>的文件标题</li><li><code>date</code>:文件创建日期时间，同时也作为发布时间</li><li><code>author</code>:作者</li><li><code>img</code>:文章特征图,如果没有设置，则会根据文章标题的 <code>hashcode</code> 的值取余，选取对应的特色照片</li><li><code>top</code>:是否置顶</li><li><code>cover</code>:是否需要加入到首页轮播封面中</li><li><code>coverlmg</code>:首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</li><li><code>password</code>:如果需要阅读相应文章，必须输入密码，此处输入值为实际密码的<code>sha256</code>小写形式。需保证主题目录<code>_config,yml</code>激活了该功能</li><li><code>toc</code>:是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题目录 <code>config.yml</code> 中激活了 <code>toc</code> 选项</li><li><code>mathjax</code>:是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题目录<code>_config.yml</code>中激活相应选修，且安装了相关插件</li><li> <code>summary</code>：文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</li><li><code>categories</code>:文章分类，本主题的分类表示宏观上大的分类</li><li><code>tags</code>:文章标签，一篇文章可以多个标签</li></ul><p>以上为可以添加的<code>Front-matter </code>。根据需求进行添加</p><h1 id="第三部分-定制个性化博客-matery主题"><a href="#第三部分-定制个性化博客-matery主题" class="headerlink" title="第三部分 定制个性化博客  matery主题"></a>第三部分 定制个性化博客  matery主题</h1><p>通过第二部分获得的本地博客，可以用了，但是观赏性极差，还没有逼格。这肯定不行，必须来一手个性化。</p><p>这里仅提供<code>matery</code>主题的部分配置。</p><p>将主目录<code>_config.yml</code>内<code>language</code>修改一下，变成如下内容，就可以让博客内容主动显示成中文:</p><pre class=" language-bash"><code class="language-bash">language: zh-CN</code></pre><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909222725455.png" alt="image-20210909222725455"></p><h2 id="1-主题修改"><a href="#1-主题修改" class="headerlink" title="1.主题修改"></a>1.主题修改</h2><p>首先下载<code>matery</code>主题包:<a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a></p><p>然后将主题包放到你存放博客文件的<code>themes</code>文件夹下，然后打开主目录下的<code>_config.yml</code>,将其中默认主题名字修改一下：</p><pre class=" language-bash"><code class="language-bash">theme: landscap</code></pre><p>修改后如下:</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909212104544.png" alt="image-20210909212104544"></p><p>保存后，查看本地博客，就会发现变成了相关主题，但是上面一排都没有设置页，导致不能访问。</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/YKwFax1NrtVL6Zo.jpg" alt="hexo-theme-1.jpg"></p><h2 id="2-添加界面"><a href="#2-添加界面" class="headerlink" title="2.添加界面"></a>2.添加界面</h2><h3 id="2-1添加404界面"><a href="#2-1添加404界面" class="headerlink" title="2.1添加404界面"></a>2.1添加404界面</h3><p>这个主题默认没有一个404界面，我们可以人为添加一个。可以在主目录<code>/source/</code>下创建一个<code>404.md</code>，或者通过如下指令创建<code>404.md</code>:</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"404"</span></code></pre><p>并在其中添加内容(所有都要添加):</p><pre class=" language-bash"><code class="language-bash">---title: 404date: 2021-09-09 21:34:12type: <span class="token string">"404"</span>layout: <span class="token string">"404"</span>description: <span class="token string">"3mm～，你没有猜错，这是一个懒人，还没完善这里，QAQ :("</span>---</code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    /* don<span class="token string">'t remove. */    .about-cover {        height: 75vh;    }&lt;/style>&lt;div class="bg-cover pd-header about-cover">    &lt;div class="container">        &lt;div class="row">            &lt;div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2">                &lt;div class="brand">                    &lt;div class="title center-align">                        404                    &lt;/div>                    &lt;div class="description center-align">                        &lt;%= page.description %>                    &lt;/div>                &lt;/div>            &lt;/div>        &lt;/div>    &lt;/div>&lt;/div>&lt;script>    // 每天切换 banner 图.  Switch banner image every day.    $('</span>.bg-cover<span class="token string">').css('</span>background-image<span class="token string">', '</span>url<span class="token punctuation">(</span>/medias/banner/<span class="token string">' + new Date().getDay() + '</span>.jpg<span class="token punctuation">)</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="2-2新建标签-tags-页"><a href="#2-2新建标签-tags-页" class="headerlink" title="2.2新建标签 tags 页"></a>2.2新建标签 tags 页</h3><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>新建出来的<code>/source/tags/index.md</code>，写入如下内容:</p><pre class=" language-bash"><code class="language-bash">---title: tagsdate: 2021-09-09 21:34:12type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---</code></pre><h3 id="2-3新建分类-categories-页"><a href="#2-3新建分类-categories-页" class="headerlink" title="2.3新建分类 categories 页"></a>2.3新建分类 categories 页</h3><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>新建出来的<code>/source/categories/index.md</code>，写入如下内容:</p><pre class=" language-bash"><code class="language-bash">---title: categoriesdate: 2021-09-09 21:34:12type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---</code></pre><h3 id="2-4新建关于我-about-页"><a href="#2-4新建关于我-about-页" class="headerlink" title="2.4新建关于我 about 页"></a>2.4新建关于我 about 页</h3><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>新建出来的<code>/source/about/index.md</code>，写入如下内容:</p><pre class=" language-bash"><code class="language-bash">---title: aboutdate: 2021-09-09 21:34:12type: <span class="token string">"about"</span>layout: <span class="token string">"about"</span>---</code></pre><p>然后在主题目录<code>_config.yml</code>下找到:</p><pre class=" language-bash"><code class="language-bash">profile:  avatar: /medias/avatar.jpg  career: Software Engineer  introduction: If you wish to succeed, you should use persistence as your good friend, experience as your reference, prudence as your brother and hope as your sentry.</code></pre><p>以上为默认信息，可以根据自己需要修改内容</p><blockquote><p>图片地址<img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210910125915088.png" alt="image-20210910125915088"></p></blockquote><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210910125449822.png" alt="image-20210910125449822"></p><p>我的项目，我的技能，相册等设置就在<code>profile</code>后面，根据注释自行选择</p><h3 id="2-5新建友情连接-friends-页"><a href="#2-5新建友情连接-friends-页" class="headerlink" title="2.5新建友情连接 friends 页"></a>2.5新建友情连接 friends 页</h3><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>新建出来的<code>/source/friends/index.md</code>，写入如下内容:</p><pre class=" language-bash"><code class="language-bash">---title: friendsdate: 2021-09-09 21:34:12type: <span class="token string">"friends"</span>layout: <span class="token string">"friends"</span>---</code></pre><p>当然，剩下部分还是需要我们自己补齐，毕竟不像前几个页面，你只需要创建一个链接，这里我们需要提供剩下内容,示例:</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://myu-data.oss-cn-chengdu.aliyuncs.com/img/QQ%E5%9B%BE%E7%89%8720210706183646.jpg"</span>,        <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"Myu_"</span>,        <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"这是一个懒虫"</span>,        <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://myu-blog.top/"</span>,        <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"路过"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909230125110.png" alt="image-20210909230125110"></p><h2 id="3-代码高亮"><a href="#3-代码高亮" class="headerlink" title="3.代码高亮"></a>3.代码高亮</h2><p><code>matery</code>主题的代码高亮不是很理想，下载一个用于代码美化的插件:<code>hexo-prism-plugin</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>将主目录下<code>_config.yml</code>内相关代码高显关闭</p><pre class=" language-python"><code class="language-python">highlight<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#代码块的设置</span>  enable<span class="token punctuation">:</span> false            <span class="token comment" spellcheck="true">#开启代码块高亮</span>  line_number<span class="token punctuation">:</span> true        <span class="token comment" spellcheck="true">#如果未指定语言，则启用自动检测</span>  auto_detect<span class="token punctuation">:</span> false        <span class="token comment" spellcheck="true">#显示行数</span>  tab_replace<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">#用n个空格替换tabs；如果值为空，则不会替换tabs</span>  wrap<span class="token punctuation">:</span> ture  hljs<span class="token punctuation">:</span> false</code></pre><p>然后在末尾添加我们自己的代码:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 关闭原有的代码高亮，使用自己的</span>prism_plugin<span class="token punctuation">:</span>  mode<span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  theme<span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  line_number<span class="token punctuation">:</span> false    <span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h2 id="4-增加建站时间"><a href="#4-增加建站时间" class="headerlink" title="4.增加建站时间"></a>4.增加建站时间</h2><p>修改主目录<code>/themes/matery/layout/_partial</code>中的<code>footer.ejs</code>，末尾加上：</p><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span>script language<span class="token operator">=</span>javascript<span class="token operator">></span>    function <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        var minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        var hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        var days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        var years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        var today <span class="token operator">=</span> new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        var todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*更具需要修改*/</span>        var t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        var diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>        var diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>        var diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        var diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        var diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>大致效果:</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909221627276.png" alt="image-20210909221627276"></p><h2 id="5-添加动漫人物"><a href="#5-添加动漫人物" class="headerlink" title="5.添加动漫人物"></a>5.添加动漫人物</h2><p>输入两次指令+添加一次代码即可实现:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku</code></pre><blockquote><p>可以根据自己需求进行修改(<a href="https://github.com/xiazeyu/live2d-widget-models">原作者地址</a></p></blockquote><p>然后在主目录<code>_config.yml</code>末尾添加内容:</p><pre class=" language-bash"><code class="language-bash">live2d:    enable: <span class="token boolean">true</span>    scriptFrom: local    pluginRootPath: live2dw/    pluginJsPath: lib/    pluginModelPath: assets/    tagMode: <span class="token boolean">false</span>    log: <span class="token boolean">false</span>    model:        use: live2d-widget-model-shizuku    display:        position: right        width: 150        height: 300    mobile:        show: <span class="token boolean">false</span>    react:        opacity: 0.7</code></pre><p>效果图:</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909222312534.png" alt="image-20210909222312534"></p><p>更多功能自行百度。</p><h2 id="6-添加blog动态标签"><a href="#6-添加blog动态标签" class="headerlink" title="6.添加blog动态标签"></a>6.添加blog动态标签</h2><p>所谓动态标签，如下:</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909230659955.png" alt="image-20210909230659955"></p><p>打开<code>themes/matery/layout/layout.ejs</code>，在末尾添加如下代码:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    var OriginTitile <span class="token operator">=</span> document.title,        st<span class="token punctuation">;</span>    document.addEventListener<span class="token punctuation">(</span><span class="token string">"visibilitychange"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document.hidden ? <span class="token punctuation">(</span>document.title <span class="token operator">=</span> <span class="token string">"看不见我🙈~看不见我🙈~"</span>, clearTimeout<span class="token punctuation">(</span>st<span class="token punctuation">))</span> <span class="token keyword">:</span> <span class="token punctuation">(</span>document.title <span class="token operator">=</span>            <span class="token string">"(๑•̀ㅂ•́) ✧被发现了～"</span>, st <span class="token operator">=</span> setTimeout<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                document.title <span class="token operator">=</span> OriginTitile            <span class="token punctuation">}</span>, 3e3<span class="token punctuation">))</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>根据需求需改即可，然后在<code>Git Bash Here  </code>中</p><pre><code>hexo cleanhexo g</code></pre><h2 id="7-添加搜索功能"><a href="#7-添加搜索功能" class="headerlink" title="7.添加搜索功能"></a>7.添加搜索功能</h2><p>使用一个名为<code>hexo-generator-search</code>的<code>Hexo</code>插件来实现内容搜索，安装:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在主目录<code>_config.yml</code>末尾添加如下内容:</p><pre class=" language-bash"><code class="language-bash">search:  path: search.xml  field: post</code></pre><h2 id="8-鼠标拖尾-—彩虹星星掉落跟随"><a href="#8-鼠标拖尾-—彩虹星星掉落跟随" class="headerlink" title="8.鼠标拖尾 —彩虹星星掉落跟随"></a>8.鼠标拖尾 —彩虹星星掉落跟随</h2><blockquote><p>由于主题自带点击爱心标志，感觉还行，就没有再去修改其他类型。</p></blockquote><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，复制粘贴<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.2.5/source/js/cursor.js">传送门</a>里的所有内容</p><p>然后在<code>themes/matery/layout/layout.ejs</code>末尾添加:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/cursor.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h2 id="9-自定义鼠标样式"><a href="#9-自定义鼠标样式" class="headerlink" title="9.自定义鼠标样式"></a>9.自定义鼠标样式</h2><p>获取一个鼠标样式，放在主题文件夹内的任意位置</p><blockquote><p>推荐<code>matery/source/medias</code></p></blockquote><p>以我的为例，我的鼠标样式存放在<code>matery/source/medias</code>下，打开主题目录<code>/source/css/my.css</code>，添加如下内容:</p><pre class=" language-bash"><code class="language-bash">*<span class="token punctuation">{</span>    cursor: url<span class="token punctuation">(</span><span class="token string">"/medias/shubiao.cur"</span><span class="token punctuation">)</span>,auto<span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">}</span>:active<span class="token punctuation">{</span>    cursor: url<span class="token punctuation">(</span><span class="token string">"/medias/shubiao.cur"</span><span class="token punctuation">)</span>,auto<span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第一个为正常显示的鼠标样式，第二个为点击鼠标左键后显示的样式</p><blockquote><p>补:过于花里胡哨的样式可能会对后续查看blog有一定的影响</p></blockquote><h2 id="10-添加二级标签"><a href="#10-添加二级标签" class="headerlink" title="10.添加二级标签"></a>10.添加二级标签</h2><p>所谓二级标签，是指这种：</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210910142019900.png" alt="image-20210910142019900"></p><p>我们总共需要配置四个文件内容:</p><ul><li><p><code>/themes/matery/layout/_partial/mobile-nav.ejs</code></p><p>将如下内容:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"menu-list mobile-menu-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github-square fa-fw"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>替换成:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 支持二级菜单特性  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"menu-list mobile-menu-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"m-nav-item"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"m-icon"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-right"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span>ul<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>                       <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(childrenLink.url)%>"</span> <span class="token operator">></span>                           <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- childrenLink.icon %>"</span> style<span class="token operator">=</span><span class="token string">"left: 25px; position: absolute;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                       <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                       <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github-square fa-fw"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre></li><li><p><code>/themes/matery/layout/_partial/navagtion.ejs</code></p><p>将如下内容:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> data<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">"mobile-nav"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidenav-trigger button-collapse"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-navicon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hide-on-med-and-down"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#searchModal"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-trigger waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i id<span class="token operator">=</span><span class="token string">"searchIcon"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-search"</span> title<span class="token operator">=</span><span class="token string">"&lt;%= __('search') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>替换成:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 支持二级菜单特性  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> data<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">"mobile-nav"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidenav-trigger button-collapse"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-navicon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right nav-menu"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hide-on-med-and-down nav-item"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>              <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>              <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-down"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sub-nav menus_item_child "</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>                   <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(childrenLink.url)%>"</span> <span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                      <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- childrenLink.icon %>"</span> style<span class="token operator">=</span><span class="token string">"margin-top: -20px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#searchModal"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-trigger waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i id<span class="token operator">=</span><span class="token string">"searchIcon"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-search"</span> title<span class="token operator">=</span><span class="token string">"&lt;%= __('search') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre></li><li><p><code>/themes/matery/source/css/matery.css</code></p><p>末尾添加内容:</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 二级菜单样式定义  */</span><span class="token selector"><span class="token class">.nav-menu</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">77</span>px<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> li </span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> li a </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">138</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-show</span> i<span class="token attribute">[aria-hidden=true]</span> </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-moz-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-o-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menus_item_child</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">20</span>px -<span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">20</span>px -<span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.98</span><span class="token punctuation">;</span>    <span class="token property">-ms-filter</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-moz-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-o-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-ms-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menus_item_child</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* position: relative; */</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">45</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> ul </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> ul li </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">245</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span> <span class="token class">.m-icon</span> </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-moz-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-o-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span> <span class="token class">.m-nav-item</span>>a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span>>a<span class="token pseudo-element">:before</span>,<span class="token class">.m-nav-item</span>>a<span class="token pseudo-class">:hover</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> <span class="token class">.m-icon</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">65</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-item</span> li<span class="token pseudo-class">:hover</span> a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>/themes/matery/source/js/matery.js</code></p><p>再最后一个<code>});</code>之前添加:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 增加二级菜单功能 </span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav-menu>li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.nav-item.nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item>a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item.m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>然后打开主题目录<code>_config.yml</code>，进行下列样式修改:</p><pre class=" language-python"><code class="language-python">Medias<span class="token punctuation">:</span>   icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>list   children<span class="token punctuation">:</span>     <span class="token operator">-</span> name<span class="token punctuation">:</span> Musics       url<span class="token punctuation">:</span> <span class="token operator">/</span>musics       icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>music     <span class="token operator">-</span> name<span class="token punctuation">:</span> Movies       url<span class="token punctuation">:</span> <span class="token operator">/</span>movies       icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>film     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="11-添加文章字数统计"><a href="#11-添加文章字数统计" class="headerlink" title="11.添加文章字数统计"></a>11.添加文章字数统计</h2><p>安装<code>hexo-wordcount</code>插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>主题目录<code>_config.yml</code>，找到如下信息</p><pre class=" language-python"><code class="language-python">wordCount<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> false  <span class="token comment" spellcheck="true">#将这个值设置为 true </span>  postWordCount<span class="token punctuation">:</span> true  min2read<span class="token punctuation">:</span> true  totalCount<span class="token punctuation">:</span> true</code></pre><h2 id="12-修改主题颜色"><a href="#12-修改主题颜色" class="headerlink" title="12.修改主题颜色"></a>12.修改主题颜色</h2><p>以下修改均在主题目录<code>/source/css/matery.css</code>中:</p><ul><li><p>修改横幅颜色:</p><p>搜索:<code>.bg-color</code>,找到后，根据自己喜好进行修改(下为个人配置)</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#3230bf</span> <span class="token number">0%</span>, <span class="token hexcode">#9d0f7a</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*修改颜色*/</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*透明效果*/</span><span class="token punctuation">}</span></code></pre></li><li><p>去除动态背景颜色:</p><p>我感觉挺烦的，看着不舒服，会选择将它去掉</p><p>搜索:<code>@-webkit-keyframes rainbow</code>以及<code>@keyframes rainbow</code>，分别将它们内容注释掉</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="13-设置背景图-网站favicon-网站LOGO"><a href="#13-设置背景图-网站favicon-网站LOGO" class="headerlink" title="13.设置背景图+网站favicon+网站LOGO"></a>13.设置背景图+网站favicon+网站LOGO</h2><p>可以将自己的照片替换主题目录<code>/source</code>及其<code>/source/medias</code>下的相关图片</p><p>都可以在主题目录<code>_config.yml</code>中进行搜索，进行修改:</p><ul><li>网站背景图:<code>background</code></li><li>网站favicon:<code>favicon</code></li><li>网站LOGO:<code>logo</code></li></ul><p>个性化设置到此结束。有些个性化，比如<strong>视频，音乐，评论，mathjax等</strong>，都没有配置，需要自行出门左转问度娘。</p><h1 id="第四部分-将博客发表到互联网上"><a href="#第四部分-将博客发表到互联网上" class="headerlink" title="第四部分  将博客发表到互联网上"></a>第四部分  将博客发表到互联网上</h1>]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1</title>
      <link href="/2021/09/10/qqq/"/>
      <url>/2021/09/10/qqq/</url>
      
        <content type="html"><![CDATA[<pre><code>                                                                        **Hexo+Github博客搭建教程**</code></pre><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    开始学习技术的时候，就有很多师傅推荐搭建博客，但是一直没开始搭建博客（就是因为穷。后来机缘巧合之下打听到可以用<code>Hexo</code>+<code>Github</code>免费搭建博客，最后只需要出购买域名的钱，再一次有了搭建博客的想法。</p><p>把第一次搭建博客过程记录下来。</p><p><strong>以下仅为 Windows10 下搭建博客流程。</strong></p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li><p>获取搭建博客所需要的工具</p></li><li><p>本地生成博客内容</p></li><li><p>定值个性化博客  matery主题</p></li><li><p>将博客发表到互联网上</p></li></ul><h1 id="第一部分-获取搭建博客所需要的工具"><a href="#第一部分-获取搭建博客所需要的工具" class="headerlink" title="第一部分 获取搭建博客所需要的工具"></a>第一部分 获取搭建博客所需要的工具</h1><p>搭建过程中，我们总共需要如下工具：</p><ul><li><p><strong>Git</strong></p><p>下载地址:  <a href="https://git-scm.com/download">Git下载</a></p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909201708255.png" alt="image-20210909201708255"></p><p>下载完成后，运行程序，一直确定next就行。安装完成后，鼠标右击，会发现多了两个快捷键。</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909201343934.png" alt="image-20210909201343934"></p><p>在搭建过程中，我们会需要用到第二个操作。更多关于Git知识，参照<a href="https://www.jianshu.com/p/36342812cd3a">Git 使用笔记</a>。</p></li><li><p><strong>Node.js</strong></p><p>下载地址: <a href="http://nodejs.cn/download/">Node.js下载</a></p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909201900753.png" alt="image-20210909201900753"></p><p>下载完成后，运行程序，同理一直next就行。</p><p>安装完成后，可以打开<code>cmd</code>或者<code>Git Bash Here</code>，进行检测是否安装成功：</p><pre class=" language-bash"><code class="language-bash">node -v      <span class="token function">npm</span> -v</code></pre><p>显示版本说明安装成功。</p></li><li><p><strong>Hexo</strong></p><p>保证前面两个工具安装成功后，鼠标右击，打开<code>cmd</code>，输入如下代码用于安装<code>hexo</code>:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>中间过程可能会有报错，可以忽略。尝试能否查看版本号:</p><pre class=" language-bash"><code class="language-bash">hexo -v</code></pre><p>显示版本号就说明安装成功。</p><p>我们接下来可能需要用到的相关指令:</p><pre class=" language-bash"><code class="language-bash">hexo init  --<span class="token operator">></span>初始化bloghexo clean --<span class="token operator">></span>清楚之前生成的东西hexo g  <span class="token operator">==</span> hexo generate  --<span class="token operator">></span> 生成静态文章<span class="token punctuation">(</span>建议用缩写<span class="token punctuation">)</span>hexo d  <span class="token operator">==</span> hexo deploy    --<span class="token operator">></span> 部署文章,用于上传本地博客内容<span class="token punctuation">(</span>建议缩写<span class="token punctuation">)</span>hexo new <span class="token string">""</span>   --<span class="token operator">></span>创建blog文章hexo new page <span class="token string">""</span>  --<span class="token operator">></span>创建blog页</code></pre></li><li><p><strong>GitHub</strong></p><p>注册一个<code>GitHub</code>账号，记录用户名，账号，密码。后续可能会要求提供这些相关信息。</p></li></ul><h1 id="第二部分-本地生成博客内容"><a href="#第二部分-本地生成博客内容" class="headerlink" title="第二部分 本地生成博客内容"></a>第二部分 本地生成博客内容</h1><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p><strong>初始化博客内容</strong></p><ul><li><p>创建一个空文档（名字任意），用于保存blog内容。</p><p>鼠标右击该文档，打开<code>Git Bash Here</code> ，初始化博客内容</p><pre class=" language-bash"><code class="language-bash">hexo init </code></pre><p>忽视初始化过程中发出的警报。</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909204704094.png" alt="image-20210909204704094"></p><p>安装必备的组件：</p><pre><code>npm install</code></pre><p>一般完成后，该目录下应该会有如下文件/文件夹</p><ul><li><code>node_modules:</code> 依赖包</li></ul><ul><li><code>public：</code>存放生成的页面</li><li><code>scaffolds：</code>生成文章的一些模板</li><li><code>source：</code>用来存放你的文章</li><li><code>themes：</code>主题</li><li><code>_config.yml:</code> 博客的配置文件</li></ul></li></ul><p><strong>访问本地博客</strong></p><ul><li><p>使用指令:</p><pre><code>hexo ghexo s</code></pre><p>完成后，会显示一个网址:<a href="http://localhost:4000/,%E7%82%B9%E5%87%BB%E8%BF%9B%E5%8E%BB%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2">http://localhost:4000/,点击进去，就会出现一个本地博客</a></p></li></ul><h2 id="脚本Front-matter-上传"><a href="#脚本Front-matter-上传" class="headerlink" title="脚本Front-matter+上传"></a>脚本Front-matter+上传</h2><p>文章均保存在主目录<code>source/_posts</code>中，默认为<code>md</code>文件，并且文件前面需要添加<code>Front-matter </code>信息，有关信息如下:</p><ul><li><code>title</code>:<code>Markdown</code>的文件标题</li><li><code>date</code>:文件创建日期时间，同时也作为发布时间</li><li><code>author</code>:作者</li><li><code>img</code>:文章特征图,如果没有设置，则会根据文章标题的 <code>hashcode</code> 的值取余，选取对应的特色照片</li><li><code>top</code>:是否置顶</li><li><code>cover</code>:是否需要加入到首页轮播封面中</li><li><code>coverlmg</code>:首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</li><li><code>password</code>:如果需要阅读相应文章，必须输入密码，此处输入值为实际密码的sha256小写形式。需保证主题目录<code>_config,yml</code>激活了该功能</li><li><code>toc</code>:是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题目录 <code>config.yml</code> 中激活了 <code>toc</code> 选项</li><li><code>mathjax</code>:是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题目录<code>_config.yml</code>中激活相应选修，且安装了相关插件</li><li> <code>summary</code>：文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</li><li><code>categories</code>:文章分类，本主题的分类表示宏观上大的分类</li><li><code>tags</code>:文章标签，一篇文章可以多个标签</li></ul><p>以上为可以添加的<code>Front-matter </code>。根据需求进行添加</p><h1 id="第三部分-定制个性化博客-matery主题"><a href="#第三部分-定制个性化博客-matery主题" class="headerlink" title="第三部分 定制个性化博客  matery主题"></a>第三部分 定制个性化博客  matery主题</h1><p>通过第二部分获得的本地博客，可以用了，但是观赏性极差，还没有逼格。这肯定不行，必须来一手个性化。</p><p>这里仅提供<code>matery</code>主题的部分配置。</p><p>将主目录<code>_config.yml</code>内<code>language</code>修改一下，变成如下内容，就可以让博客内容主动显示成中文:</p><pre class=" language-bash"><code class="language-bash">language: zh-CN</code></pre><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909222725455.png" alt="image-20210909222725455"></p><h2 id="1-主题修改"><a href="#1-主题修改" class="headerlink" title="1.主题修改"></a>1.主题修改</h2><p>首先下载<code>matery</code>主题包:<a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a></p><p>然后将主题包放到你存放博客文件的<code>themes</code>文件夹下，然后打开主目录下的<code>_config.yml</code>,将其中默认主题名字修改一下：</p><pre class=" language-bash"><code class="language-bash">theme: landscap</code></pre><p>修改后如下:</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909212104544.png" alt="image-20210909212104544"></p><p>保存后，查看本地博客，就会发现变成了相关主题，但是上面一排都没有设置页，导致不能访问。</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/YKwFax1NrtVL6Zo.jpg" alt="hexo-theme-1.jpg"></p><h2 id="2-添加界面"><a href="#2-添加界面" class="headerlink" title="2.添加界面"></a>2.添加界面</h2><h3 id="2-1添加404界面"><a href="#2-1添加404界面" class="headerlink" title="2.1添加404界面"></a>2.1添加404界面</h3><p>这个主题默认没有一个404界面，我们可以人为添加一个。可以在主目录<code>/source/</code>下创建一个<code>404.md</code>，或者通过如下指令创建<code>404.md</code>:</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"404"</span></code></pre><p>并在其中添加内容(所有都要添加):</p><pre class=" language-bash"><code class="language-bash">---title: 404date: 2021-09-09 21:34:12type: <span class="token string">"404"</span>layout: <span class="token string">"404"</span>description: <span class="token string">"3mm～，你没有猜错，这是一个懒人，还没完善这里，QAQ :("</span>---</code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    /* don<span class="token string">'t remove. */    .about-cover {        height: 75vh;    }&lt;/style>&lt;div class="bg-cover pd-header about-cover">    &lt;div class="container">        &lt;div class="row">            &lt;div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2">                &lt;div class="brand">                    &lt;div class="title center-align">                        404                    &lt;/div>                    &lt;div class="description center-align">                        &lt;%= page.description %>                    &lt;/div>                &lt;/div>            &lt;/div>        &lt;/div>    &lt;/div>&lt;/div>&lt;script>    // 每天切换 banner 图.  Switch banner image every day.    $('</span>.bg-cover<span class="token string">').css('</span>background-image<span class="token string">', '</span>url<span class="token punctuation">(</span>/medias/banner/<span class="token string">' + new Date().getDay() + '</span>.jpg<span class="token punctuation">)</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="2-2新建标签-tags-页"><a href="#2-2新建标签-tags-页" class="headerlink" title="2.2新建标签 tags 页"></a>2.2新建标签 tags 页</h3><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>新建出来的<code>/source/tags/index.md</code>，写入如下内容:</p><pre class=" language-bash"><code class="language-bash">---title: tagsdate: 2021-09-09 21:34:12type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---</code></pre><h3 id="2-3新建分类-categories-页"><a href="#2-3新建分类-categories-页" class="headerlink" title="2.3新建分类 categories 页"></a>2.3新建分类 categories 页</h3><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>新建出来的<code>/source/categories/index.md</code>，写入如下内容:</p><pre class=" language-bash"><code class="language-bash">---title: categoriesdate: 2021-09-09 21:34:12type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---</code></pre><h3 id="2-4新建关于我-about-页"><a href="#2-4新建关于我-about-页" class="headerlink" title="2.4新建关于我 about 页"></a>2.4新建关于我 about 页</h3><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>新建出来的<code>/source/about/index.md</code>，写入如下内容:</p><pre class=" language-bash"><code class="language-bash">---title: aboutdate: 2021-09-09 21:34:12type: <span class="token string">"about"</span>layout: <span class="token string">"about"</span>---</code></pre><p>然后在主题目录<code>_config.yml</code>下找到:</p><pre class=" language-bash"><code class="language-bash">profile:  avatar: /medias/avatar.jpg  career: Software Engineer  introduction: If you wish to succeed, you should use persistence as your good friend, experience as your reference, prudence as your brother and hope as your sentry.</code></pre><p>以上为默认信息，可以根据自己需要修改内容</p><blockquote><p>图片地址<img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210910125915088.png" alt="image-20210910125915088"></p></blockquote><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210910125449822.png" alt="image-20210910125449822"></p><p>我的项目，我的技能，相册等设置就在<code>profile</code>后面，根据注释自行选择</p><h3 id="2-5新建友情连接-friends-页"><a href="#2-5新建友情连接-friends-页" class="headerlink" title="2.5新建友情连接 friends 页"></a>2.5新建友情连接 friends 页</h3><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>新建出来的<code>/source/friends/index.md</code>，写入如下内容:</p><pre class=" language-bash"><code class="language-bash">---title: friendsdate: 2021-09-09 21:34:12type: <span class="token string">"friends"</span>layout: <span class="token string">"friends"</span>---</code></pre><p>当然，剩下部分还是需要我们自己补齐，毕竟不像前几个页面，你只需要创建一个链接，这里我们需要提供剩下内容,示例:</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://myu-data.oss-cn-chengdu.aliyuncs.com/img/QQ%E5%9B%BE%E7%89%8720210706183646.jpg"</span>,        <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"Myu_"</span>,        <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"这是一个懒虫"</span>,        <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://myu-blog.top/"</span>,        <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"路过"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909230125110.png" alt="image-20210909230125110"></p><h2 id="3-代码高亮"><a href="#3-代码高亮" class="headerlink" title="3.代码高亮"></a>3.代码高亮</h2><p><code>matery</code>主题的代码高亮不是很理想，下载一个用于代码美化的插件:<code>hexo-prism-plugin</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>将主目录下<code>_config.yml</code>内相关代码高显关闭</p><pre class=" language-python"><code class="language-python">highlight<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#代码块的设置</span>  enable<span class="token punctuation">:</span> false            <span class="token comment" spellcheck="true">#开启代码块高亮</span>  line_number<span class="token punctuation">:</span> true        <span class="token comment" spellcheck="true">#如果未指定语言，则启用自动检测</span>  auto_detect<span class="token punctuation">:</span> false        <span class="token comment" spellcheck="true">#显示行数</span>  tab_replace<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">#用n个空格替换tabs；如果值为空，则不会替换tabs</span>  wrap<span class="token punctuation">:</span> ture  hljs<span class="token punctuation">:</span> false</code></pre><p>然后在末尾添加我们自己的代码:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 关闭原有的代码高亮，使用自己的</span>prism_plugin<span class="token punctuation">:</span>  mode<span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  theme<span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  line_number<span class="token punctuation">:</span> false    <span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h2 id="4-增加建站时间"><a href="#4-增加建站时间" class="headerlink" title="4.增加建站时间"></a>4.增加建站时间</h2><p>修改主目录<code>/themes/matery/layout/_partial</code>中的<code>footer.ejs</code>，末尾加上：</p><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span>script language<span class="token operator">=</span>javascript<span class="token operator">></span>    function <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        var minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        var hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        var days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        var years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        var today <span class="token operator">=</span> new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        var todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*更具需要修改*/</span>        var t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        var diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>        var diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>        var diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        var diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        var diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>大致效果:</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909221627276.png" alt="image-20210909221627276"></p><h2 id="5-添加动漫人物"><a href="#5-添加动漫人物" class="headerlink" title="5.添加动漫人物"></a>5.添加动漫人物</h2><p>输入两次指令+添加一次代码即可实现:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku</code></pre><blockquote><p>可以根据自己需求进行修改(<a href="https://github.com/xiazeyu/live2d-widget-models">原作者地址</a></p></blockquote><p>然后在主目录<code>_config.yml</code>末尾添加内容:</p><pre class=" language-bash"><code class="language-bash">live2d:    enable: <span class="token boolean">true</span>    scriptFrom: local    pluginRootPath: live2dw/    pluginJsPath: lib/    pluginModelPath: assets/    tagMode: <span class="token boolean">false</span>    log: <span class="token boolean">false</span>    model:        use: live2d-widget-model-shizuku    display:        position: right        width: 150        height: 300    mobile:        show: <span class="token boolean">false</span>    react:        opacity: 0.7</code></pre><p>效果图:</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909222312534.png" alt="image-20210909222312534"></p><p>更多功能自行百度。</p><h2 id="6-添加blog动态标签"><a href="#6-添加blog动态标签" class="headerlink" title="6.添加blog动态标签"></a>6.添加blog动态标签</h2><p>所谓动态标签，如下:</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210909230659955.png" alt="image-20210909230659955"></p><p>打开<code>themes/matery/layout/layout.ejs</code>，在末尾添加如下代码:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    var OriginTitile <span class="token operator">=</span> document.title,        st<span class="token punctuation">;</span>    document.addEventListener<span class="token punctuation">(</span><span class="token string">"visibilitychange"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document.hidden ? <span class="token punctuation">(</span>document.title <span class="token operator">=</span> <span class="token string">"看不见我🙈~看不见我🙈~"</span>, clearTimeout<span class="token punctuation">(</span>st<span class="token punctuation">))</span> <span class="token keyword">:</span> <span class="token punctuation">(</span>document.title <span class="token operator">=</span>            <span class="token string">"(๑•̀ㅂ•́) ✧被发现了～"</span>, st <span class="token operator">=</span> setTimeout<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                document.title <span class="token operator">=</span> OriginTitile            <span class="token punctuation">}</span>, 3e3<span class="token punctuation">))</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>根据需求需改即可，然后在<code>Git Bash Here  </code>中</p><pre><code>hexo cleanhexo g</code></pre><h2 id="7-添加搜索功能"><a href="#7-添加搜索功能" class="headerlink" title="7.添加搜索功能"></a>7.添加搜索功能</h2><p>使用一个名为<code>hexo-generator-search</code>的<code>Hexo</code>插件来实现内容搜索，安装:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在主目录<code>_config.yml</code>末尾添加如下内容:</p><pre class=" language-bash"><code class="language-bash">search:  path: search.xml  field: post</code></pre><h2 id="8-鼠标拖尾-—彩虹星星掉落跟随"><a href="#8-鼠标拖尾-—彩虹星星掉落跟随" class="headerlink" title="8.鼠标拖尾 —彩虹星星掉落跟随"></a>8.鼠标拖尾 —彩虹星星掉落跟随</h2><blockquote><p>由于主题自带点击爱心标志，感觉还行，就没有再去修改其他类型。</p></blockquote><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，复制粘贴<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.2.5/source/js/cursor.js">传送门</a>里的所有内容</p><p>然后在<code>themes/matery/layout/layout.ejs</code>末尾添加:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/cursor.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h2 id="9-自定义鼠标样式"><a href="#9-自定义鼠标样式" class="headerlink" title="9.自定义鼠标样式"></a>9.自定义鼠标样式</h2><p>获取一个鼠标样式，放在主题文件夹内的任意位置</p><blockquote><p>推荐<code>matery/source/medias</code></p></blockquote><p>以我的为例，我的鼠标样式存放在<code>matery/source/medias</code>下，打开主题目录<code>/source/css/my.css</code>，添加如下内容:</p><pre class=" language-bash"><code class="language-bash">*<span class="token punctuation">{</span>    cursor: url<span class="token punctuation">(</span><span class="token string">"/medias/shubiao.cur"</span><span class="token punctuation">)</span>,auto<span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">}</span>:active<span class="token punctuation">{</span>    cursor: url<span class="token punctuation">(</span><span class="token string">"/medias/shubiao.cur"</span><span class="token punctuation">)</span>,auto<span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第一个为正常显示的鼠标样式，第二个为点击鼠标左键后显示的样式</p><blockquote><p>补:过于花里胡哨的样式可能会对后续查看blog有一定的影响</p></blockquote><h2 id="10-添加二级标签"><a href="#10-添加二级标签" class="headerlink" title="10.添加二级标签"></a>10.添加二级标签</h2><p>所谓二级标签，是指这种：</p><p><img src="https://myu-data.oss-cn-chengdu.aliyuncs.com/img/image-20210910142019900.png" alt="image-20210910142019900"></p><p>我们总共需要配置四个文件内容:</p><ul><li><p><code>/themes/matery/layout/_partial/mobile-nav.ejs</code></p><p>将如下内容:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"menu-list mobile-menu-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github-square fa-fw"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>替换成:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 支持二级菜单特性  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"menu-list mobile-menu-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"m-nav-item"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"m-icon"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-right"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span>ul<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>                       <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(childrenLink.url)%>"</span> <span class="token operator">></span>                           <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- childrenLink.icon %>"</span> style<span class="token operator">=</span><span class="token string">"left: 25px; position: absolute;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                       <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                       <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github-square fa-fw"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre></li><li><p><code>/themes/matery/layout/_partial/navagtion.ejs</code></p><p>将如下内容:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> data<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">"mobile-nav"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidenav-trigger button-collapse"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-navicon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hide-on-med-and-down"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#searchModal"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-trigger waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i id<span class="token operator">=</span><span class="token string">"searchIcon"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-search"</span> title<span class="token operator">=</span><span class="token string">"&lt;%= __('search') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>替换成:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 支持二级菜单特性  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> data<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">"mobile-nav"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidenav-trigger button-collapse"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-navicon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right nav-menu"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hide-on-med-and-down nav-item"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>              <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>              <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-down"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sub-nav menus_item_child "</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>                   <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(childrenLink.url)%>"</span> <span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                      <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- childrenLink.icon %>"</span> style<span class="token operator">=</span><span class="token string">"margin-top: -20px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#searchModal"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-trigger waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i id<span class="token operator">=</span><span class="token string">"searchIcon"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-search"</span> title<span class="token operator">=</span><span class="token string">"&lt;%= __('search') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre></li><li><p><code>/themes/matery/source/css/matery.css</code></p><p>末尾添加内容:</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 二级菜单样式定义  */</span><span class="token selector"><span class="token class">.nav-menu</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">77</span>px<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> li </span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> li a </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">138</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-show</span> i<span class="token attribute">[aria-hidden=true]</span> </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-moz-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-o-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menus_item_child</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">20</span>px -<span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">20</span>px -<span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.98</span><span class="token punctuation">;</span>    <span class="token property">-ms-filter</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-moz-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-o-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-ms-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menus_item_child</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* position: relative; */</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">45</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> ul </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> ul li </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">245</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span> <span class="token class">.m-icon</span> </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-moz-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-o-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span> <span class="token class">.m-nav-item</span>>a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span>>a<span class="token pseudo-element">:before</span>,<span class="token class">.m-nav-item</span>>a<span class="token pseudo-class">:hover</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> <span class="token class">.m-icon</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">65</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-item</span> li<span class="token pseudo-class">:hover</span> a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>/themes/matery/source/js/matery.js</code></p><p>再最后一个<code>});</code>之前添加:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 增加二级菜单功能 </span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav-menu>li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.nav-item.nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item>a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item.m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>然后打开主题目录<code>_config.yml</code>，进行下列样式修改:</p><pre class=" language-python"><code class="language-python">Medias<span class="token punctuation">:</span>   icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>list   children<span class="token punctuation">:</span>     <span class="token operator">-</span> name<span class="token punctuation">:</span> Musics       url<span class="token punctuation">:</span> <span class="token operator">/</span>musics       icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>music     <span class="token operator">-</span> name<span class="token punctuation">:</span> Movies       url<span class="token punctuation">:</span> <span class="token operator">/</span>movies       icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>film     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="11-添加文章字数统计"><a href="#11-添加文章字数统计" class="headerlink" title="11.添加文章字数统计"></a>11.添加文章字数统计</h2><p>安装<code>hexo-wordcount</code>插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>主题目录<code>_config.yml</code>，找到如下信息</p><pre class=" language-python"><code class="language-python">wordCount<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> false  <span class="token comment" spellcheck="true">#将这个值设置为 true </span>  postWordCount<span class="token punctuation">:</span> true  min2read<span class="token punctuation">:</span> true  totalCount<span class="token punctuation">:</span> true</code></pre><h2 id="12-修改主题颜色"><a href="#12-修改主题颜色" class="headerlink" title="12.修改主题颜色"></a>12.修改主题颜色</h2><p>以下修改均在主题目录<code>/source/css/matery.css</code>中:</p><ul><li><p>修改横幅颜色:</p><p>搜索:<code>.bg-color</code>,找到后，根据自己喜好进行修改(下为个人配置)</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#3230bf</span> <span class="token number">0%</span>, <span class="token hexcode">#9d0f7a</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*修改颜色*/</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*透明效果*/</span><span class="token punctuation">}</span></code></pre></li><li><p>去除动态背景颜色:</p><p>我感觉挺烦的，看着不舒服，会选择将它去掉</p><p>搜索:<code>@-webkit-keyframes rainbow</code>以及<code>@keyframes rainbow</code>，分别将它们内容注释掉</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="13-设置背景图-网站favicon-网站LOGO"><a href="#13-设置背景图-网站favicon-网站LOGO" class="headerlink" title="13.设置背景图+网站favicon+网站LOGO"></a>13.设置背景图+网站favicon+网站LOGO</h2><p>可以将自己的照片替换主题目录<code>/source</code>及其<code>/source/medias</code>下的相关图片</p><p>都可以在主题目录<code>_config.yml</code>中进行搜索，进行修改:</p><ul><li>网站背景图:<code>background</code></li><li>网站favicon:<code>favicon</code></li><li>网站LOGO:<code>logo</code></li></ul><p>个性化设置到此结束。有些个性化，比如<strong>视频，音乐，评论，mathjax等</strong>，都没有配置，需要自行出门左转问度娘。</p><h1 id="第四部分-将博客发表到互联网上"><a href="#第四部分-将博客发表到互联网上" class="headerlink" title="第四部分  将博客发表到互联网上"></a>第四部分  将博客发表到互联网上</h1>]]></content>
      
      
      <categories>
          
          <category> 1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/2021/09/08/test2.0/"/>
      <url>/2021/09/08/test2.0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础知识点："><a href="#Java基础知识点：" class="headerlink" title="Java基础知识点："></a>Java基础知识点：</h1><h3 id="第一个java程序HelloWord"><a href="#第一个java程序HelloWord" class="headerlink" title="第一个java程序HelloWord:"></a>第一个java程序HelloWord:</h3><p><strong>步骤：<br>1.将java代码编写到扩展名为.java的文件中<br>2.通过javac命令对该java文件进行编译<br>3.通过java命令对生成的class文件进行运行</strong></p><p><strong><code>.java文件</code>(源文件)通过  <code>java.exe</code>编译成<code>.class文件</code>(字节码),再通过<code>java.exe</code>运行</strong></p><table><thead><tr><th>java关键字</th><th>均为小写字母</th></tr></thead><tbody><tr><td><strong>java保留字</strong></td><td>**现有版本还未使用,但后续版本肯能作为关键字使用,尽量不使用(goto||const) **</td></tr><tr><td>**java标识符 **</td><td><strong>对各种变量,方法和类等要素命名时使用的字符串序列(凡是自己命名的均为标识符)</strong></td></tr></tbody></table><p><strong>java类名与文件名</strong></p><p><strong>1.Java保存的文件名必须与类名一致；<br>2.如果文件中只有一个类，文件名必须与类名一致；<br>3.一个Java文件中只能有一个public类；<br>4.如果文件中不止一个类，文件名必须与public类名一致；<br>5.如果文件中不止一个类，而且没有public类，文件名可与任一类名一致。</strong></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><table><thead><tr><th>方式</th><th>表达方式</th><th>用法或者作用</th></tr></thead><tbody><tr><td><strong>单行注释</strong></td><td>// 这是一个单行注释</td><td><strong>对所写程序的进行解释说明,增强可读性。方便自己与他人</strong></td></tr><tr><td><strong>多行注释</strong></td><td>/*  这是一个多行注释   */</td><td><strong>对所写程序的进行解释说明,增强可读性。方便自己与他人</strong></td></tr><tr><td><strong>文档注释(java特有)</strong></td><td>/** 这是一个文档注释  */</td><td>**可以被javadoc解析,生成一套以网页文件形式体现的程序的说明文档 **</td></tr></tbody></table><p>文档注释实例:</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421130258676.png" alt="image-20210421130258676"></p><p>cmd中,对应位置输入<code>javadoc -d 文件名 -author -version 需要解析的.java</code></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421131355725.png" alt="image-20210421131355725"></p><p><strong>注意:如果类名与文件名不一致，会出现报错</strong></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421131833754.png" alt="image-20210421131833754"></p><p>打开MyJava文件,双击点开index.html</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421131937278.png" alt="image-20210421131937278"></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421132057920.png" alt="image-20210421132057920"></p><p>文档注释(补):</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210510211446229.png" alt="image-20210510211446229"></p><p>调用时</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210510211536098.png" alt="image-20210510211536098"></p><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><table><thead><tr><th>进制</th><th>表现形式</th></tr></thead><tbody><tr><td>二进制</td><td><strong>满2进1,以0B或者0b开头</strong></td></tr><tr><td>八进制</td><td><strong>满8进1,以0开头</strong></td></tr><tr><td>十进制</td><td><strong>满10进1</strong></td></tr><tr><td>十六进制</td><td><strong>满16进1,以0x或0X开头</strong></td></tr></tbody></table><p>补充:<strong>(0代表正数,1代表负数)</strong></p><table><thead><tr><th>二进制</th><th>正数</th><th>负数</th></tr></thead><tbody><tr><td>原码</td><td><strong>最高位是符号位,其余各位为数值本身的绝对值</strong></td><td><strong>最高位是符号位,其余各位为数值本身的绝对值</strong></td></tr><tr><td>反码</td><td><strong>反码与原码相同</strong></td><td><strong>最高位(符号位)确认为1,其余位对原码取反</strong></td></tr><tr><td>补码</td><td><strong>补码与原码相同</strong></td><td><strong>最高位(符号位)为1,其余位对原码取反加1</strong></td></tr></tbody></table><p><strong>计算机底层都以补码的方式来储存数据</strong></p><p><strong>转换:</strong></p><table><thead><tr><th>二进制转换成八进制</th><th>左往右三合一,不足补零</th></tr></thead><tbody><tr><td><strong>二进制转换成十六进制</strong></td><td><strong>左往右四合一,不足补零</strong></td></tr></tbody></table><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>&amp;–逻辑与</th><th>|–逻辑或</th><th>！–逻辑非</th><th>&amp;&amp;–短路与</th><th>||–短路或</th><th>^–逻辑异或</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>符号</th><th>相同点</th><th>不同点</th></tr></thead><tbody><tr><td>&amp;,&amp;&amp;</td><td><strong>运算结果相同;当符号左边是true时,二者都会执行符号右边的运算</strong></td><td><strong>当符号左边是false时,&amp;继续执行符号右边的运算,&amp;&amp;则不再执行</strong></td></tr><tr><td>|,||</td><td><strong>运算结果相同;当符号左边是false时,二者都会执行符号右边的运算</strong></td><td><strong>当符号左边是true时,|继续执行符号右边的运算,||则不再执行</strong></td></tr></tbody></table><p><strong>开发中,推荐使用短路符号</strong></p><p>实例:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logic_and_short_circuit_practice</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;</span> y1<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x1 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x1 = "</span><span class="token operator">+</span> x1 <span class="token operator">+</span> <span class="token string">",y1 = "</span><span class="token operator">+</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x2<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> y2<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x2 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x2 = "</span><span class="token operator">+</span> x2 <span class="token operator">+</span> <span class="token string">",y2 = "</span><span class="token operator">+</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x3<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">|</span> y3<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x3 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x3 = "</span><span class="token operator">+</span> x3 <span class="token operator">+</span> <span class="token string">",y3 = "</span><span class="token operator">+</span> y3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x4<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> y4<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x4 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x4 = "</span><span class="token operator">+</span> x4 <span class="token operator">+</span> <span class="token string">",y4 = "</span><span class="token operator">+</span> y4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*answer:x1 = 2,y1 = 2x2 = 2,y2 = 1x3 = 2,y3 = 2x4 = 2,y4 = 2*/</span></code></pre><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table><thead><tr><th>运算符</th><th>&lt;&lt;</th><th>&gt;&gt;</th><th>&gt;&gt;&gt;</th><th>&amp;</th><th>|</th><th>^</th><th>~</th></tr></thead><tbody><tr><td><strong>运算</strong></td><td>**左移 **</td><td>**右移     **</td><td>**无符号位移  **</td><td>**与运算 **</td><td><strong>或运算</strong></td><td>**异或运算 **</td><td><strong>取反运算</strong></td></tr><tr><td>**范例   **</td><td><strong>3&lt;&lt;2=12  ==  3x2x2=12</strong></td><td><strong>3&gt;&gt;1=1 == 3/2=1</strong></td><td>**3&gt;&gt;&gt;1=1 == 3/2=1 **</td><td>**6&amp;3=2 **</td><td><strong>6|3=7</strong></td><td>**6^3=5    **</td><td>**~6=-7    **</td></tr></tbody></table><p><strong>注释:位运算是直接对整数的二进制进行的运算</strong></p><table><thead><tr><th>&amp;</th><th>全为一才为一,其余均为零</th></tr></thead><tbody><tr><td><strong>|</strong></td><td><strong>全零才为零</strong></td></tr><tr><td><strong>^</strong></td><td><strong>全为零或者一均为零</strong></td></tr><tr><td><strong>~</strong></td><td><strong>一变零,零变一</strong></td></tr></tbody></table><p><strong>以12&amp;5=4为例:</strong></p><table><thead><tr><th>初始:</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>12</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td><strong>5</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td><strong>结果:</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>4</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr></tbody></table><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><table><thead><tr><th>结构</th><th>(条件表达式)？表达式1：表达式2</th></tr></thead><tbody><tr><td><strong>含义</strong></td><td><strong>条件表达式为true,执行表达式1;为false,执行表达式2</strong></td></tr></tbody></table><p><strong>注释:并未强制要求表达式的类型,但最好是一致的,最终类型取决于你的接受变量的类型,</strong></p><p><strong>实例:</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//需求:获取三个数中的最大值</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SggP83</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3<span class="token operator">=</span><span class="token operator">-</span><span class="token number">43</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int max1 = (n1 > n2)? n1 : n2;</span>        <span class="token comment" spellcheck="true">//int max2 = (max1 > n3)? max1 : n3;</span>        <span class="token keyword">int</span> max3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">)</span> <span class="token operator">></span> n3<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">)</span> <span class="token operator">:</span> n3<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三个数中最大的值为:"</span><span class="token operator">+</span>max3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//演示三元运算符嵌套运用,不推荐使用</span><span class="token comment" spellcheck="true">/*answer:三个数中最大的值为:30*/</span><span class="token comment" spellcheck="true">//能使用三元运算符的地方,均可写成if-else</span></code></pre><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p><strong>如何从键盘获取不同类型的变量:需要使用Scanner类</strong></p><p><strong>具体实现步骤:</strong><br><strong>1.导包:<code>import java.util.Scanner;</code></strong><br><strong>2.Scanner的实例化:<code>Scanner scan = new Scanner(System.in);</code></strong><br><strong>3.调用Scanner类的相关方法,来获取指定类型的变量</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//简单代码</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SggP92_Scanner_Text</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input A-D:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ENGLISH <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input a-d:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String english <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input 1314:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number1 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input 5.2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> number2 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input true or false:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对于char的获取,Scanner没有提供相关的方法,只能获取一个字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input boy or girl:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String character <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> character<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取索引为0位置上的字符</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Answer:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ENGLISH<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>english<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>number1<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>number2<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>bool<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Input A-D:ABCDInput a-d:abcdInput 1314:1314Input 5.2:5.2Input true or false:trueInput boy or girl:boyAnswer:ABCDabcd13145.2trueb*/</span></code></pre><p><strong>如果要进行字符串判断是否相等,请使用<code> .euqls("比对内容")</code>,实例:SggP99.java</strong></p><h3 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h3><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><strong>具体实现步骤:</strong></p><p><strong>1.导包:<code>import java.util.Random;</code></strong></p><p><strong>2.Random的实例化: eg.</strong><code>Random xxx = new Random();</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> XXX <span class="token operator">=</span> xxx<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b为最低值,a+b-1为最高值</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//随机生成1~10的数字</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 随机数测试 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> Rand <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Rand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>构造方法：</strong><br><strong>(1)public Random()</strong><br><strong>(2)public Random(long seed)</strong><br><strong>Java产生随机数需要有一个基值seed，在第一种方法中基值缺省，则将系统时间作为seed。</strong></p><p><strong>普通方法：</strong></p><table><thead><tr><th><strong>产生随机数类型</strong></th><th><strong>构造</strong></th><th>原理</th></tr></thead><tbody><tr><td><strong>整型</strong></td><td><strong>nextInt();</strong></td><td><strong>返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值。</strong></td></tr><tr><td><strong>long型</strong></td><td><strong>nextLong();</strong></td><td><strong>返回下一个伪随机数，它是从此随机数生成器的序列中取出的、均匀分布的 long 值。</strong></td></tr><tr><td><strong>float型</strong></td><td><strong>nextFloat();</strong></td><td><strong>返回下一个伪随机数，它是从此随机数生成器的序列中取出的、在 0.0 和 1.0之间均匀分布的 double 值。</strong></td></tr><tr><td><strong>double型</strong></td><td><strong>nextDouble();</strong></td><td><strong>返回下一个伪随机数，它是从此随机数生成器的序列中取出的、在 0.0 和 1.0 之间均匀分布的 float 值。</strong></td></tr><tr><td><strong>double型的Goussian</strong></td><td><strong>nextGoussian();</strong></td><td><strong>返回下一个伪随机数，它是从此随机数生成器的序列中取出的、呈高斯(“正常地”)分布的 double 值，其平均值是 0.0，标准偏差是 1.0。</strong></td></tr><tr><td><strong>boolean型</strong></td><td><strong>nextBoolean();</strong></td><td><strong>该方法的作用是生成一个随机的boolean值，生成true和false的值几率相等，也就是都是50%的几率。</strong></td></tr></tbody></table><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>公式:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//随机数范围:[a,b]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Math.random()=[0.0,1.0)</span><span class="token comment" spellcheck="true">//a=max,b=min</span></code></pre><p>例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取一个位于[10,99]的随机数</span><span class="token comment" spellcheck="true">//仅补充关键代码</span><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><p>略</p><h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h4><p><strong>只能匹配值,不能判断范围</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//尝试switch-case</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SggP100</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*answerInput number:1one*/</span></code></pre><p><strong>注:如果没有break,会将匹配对应的代码后面的值一并打印出来</strong></p><p><strong>switch结构中的表达式,只能为如下六种类型</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span>  <span class="token keyword">short</span>  <span class="token keyword">char</span>  <span class="token keyword">int</span>  枚举类型<span class="token punctuation">(</span>JDK5<span class="token number">.0</span>新增<span class="token punctuation">)</span>  <span class="token function">String</span><span class="token punctuation">(</span>JDK7<span class="token number">.0</span>新增<span class="token punctuation">)</span></code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><h4 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h4><p><strong>略</strong></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><strong>定义:多个相同类型数据按一定顺序排列的集合,并使用同一个名字命名,并通过编号的方式对这些数据进行统一管理</strong></p><p><strong>数组一旦初始化,其长度就会确定且不能修改</strong></p><h4 id="数组元素的默认初始化值"><a href="#数组元素的默认初始化值" class="headerlink" title="数组元素的默认初始化值"></a><strong>数组元素的默认初始化值</strong></h4><table><thead><tr><th>数组元素类型</th><th>整型</th><th>浮点型</th><th>char型</th><th>boolean型</th><th>引用数据类型(数组,类,接口)</th></tr></thead><tbody><tr><td><strong>对应默认初始化值</strong></td><td><strong>0</strong></td><td><strong>0.0</strong></td><td><strong>0或’\u0000’(并非’0’)</strong></td><td><strong>false</strong></td><td><strong>null</strong></td></tr></tbody></table><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayText</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数组声明和初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.1静态初始化;数组的初始化和数组的赋值操作同时进行</span>        ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.2动态初始化;分开进行</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组一旦初始化完成,数组长度确定</span>        <span class="token comment" spellcheck="true">//调用数组中的指定位置的元素:角标调用,从零开始,到数组长度-1结束</span>        names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Daisy"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Army"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Bob"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Tony"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Alice"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明(int为例)</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态初始化</span></code></pre><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p><strong>实际上,从数组底层的运行机制来说,并没有多维数组</strong>  </p><p>规定:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二维数组分为外层数组元素,与内层数组元素</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>外层元素<span class="token operator">:</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>等内层元素<span class="token operator">:</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>等</code></pre><p>声明:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//(int为例)</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> or <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态初始化</span>部分正确写法<span class="token operator">:</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型判断,如果分行或者String都不能省</span><span class="token punctuation">(</span>eg<span class="token operator">:</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">;</span>ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>调用:类似于一维数组的调用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如下定义:</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行下面操作:</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现报错:</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NullPointerException    at ceshi<span class="token punctuation">.</span>ceshi1<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>ceshi1<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">)</span></code></pre><p>获取长度:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//以 int[] arr[] = new int[][]{{1,2,3},{4,5},{6,7,8}}; 为例:</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer:3</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer:3</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer:2</span></code></pre><p>遍历:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//以刚才的获取长度中的例子为例</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//几维数组就需要几层循环</span></code></pre><p>默认初始化值:</p><table><thead><tr><th>查找元素类型</th><th>初始化过</th><th>未初始化过</th></tr></thead><tbody><tr><td><strong>外层元素</strong></td><td><strong>一个指向内层元素数组的地址值</strong></td><td><strong>null</strong></td></tr><tr><td><strong>内层元素</strong></td><td><strong>参照一维数组的默认初始化值</strong></td><td><strong>报错(如下)</strong></td></tr></tbody></table><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NullPointerException    at ceshi<span class="token punctuation">.</span>ceshi1<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>ceshi1<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">)</span></code></pre><p><strong>补充:未初始化实例–&gt;<code>int[][] arr = new int[4][];</code>,即未创建内层元素</strong></p><p>部分练习:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明: int[] x,y[];在给x,y变量赋值以后,下列选项可以通过编译的有:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>            noy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            yesy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        nox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>        noy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        yesx <span class="token operator">=</span> y<span class="token punctuation">;</span>                no<span class="token comment" spellcheck="true">//可以同样类型赋值,或者满足自动类型提升要求</span></code></pre><h4 id="数组中指定元素的查找"><a href="#数组中指定元素的查找" class="headerlink" title="数组中指定元素的查找"></a>数组中指定元素的查找</h4><h5 id="1-线性查找"><a href="#1-线性查找" class="headerlink" title="1.线性查找"></a>1.线性查找</h5><p><strong>实现思路:通过遍历的方式,一个一个的数据进行比较,查找</strong></p><p><strong>适用性:具有普遍适用性</strong></p><h5 id="2-二分法查找"><a href="#2-二分法查找" class="headerlink" title="2.二分法查找"></a>2.二分法查找</h5><p><strong>实现思路:每次比较中间值,折半的方式检索</strong></p><p><strong>适用性:数组必须有序</strong></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="1-数据与数据之间的关系"><a href="#1-数据与数据之间的关系" class="headerlink" title="1.数据与数据之间的关系:"></a>1.数据与数据之间的关系:</h4><p><strong>集合,一对一,一对多,多对多</strong></p><h4 id="2-数据的存储结构"><a href="#2-数据的存储结构" class="headerlink" title="2.数据的存储结构:"></a>2.数据的存储结构:</h4><p><strong>线性表(一对一的关系):顺序表(eg.数组),链表,栈,队列</strong></p><p><strong>树形结构(一对多的关系):二叉树</strong></p><p><strong>图形结构(多对多的关系)</strong></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="衡量算法的优劣"><a href="#衡量算法的优劣" class="headerlink" title="衡量算法的优劣:"></a><strong>衡量算法的优劣:</strong></h4><p><strong><em>1.时间复杂度</em>:分析关键字的比较次数和记录的移动次数</strong></p><p><strong><em>2.空间复杂度</em>:分析排序算法中需要多少辅助内存</strong></p><p><strong><em>3.稳定性</em>:若两个记录A和B的关键字值相等,但排序后A,B的先后次序保持不变,则这种排序算法是稳定的</strong></p><pre class=" language-java"><code class="language-java">稳定性列举<span class="token operator">:</span>排序前<span class="token operator">:</span><span class="token comment" spellcheck="true">//{3,2,1,4,5,3'};</span>若排序后<span class="token operator">:</span><span class="token comment" spellcheck="true">//{1,2,3,3',4,5};</span>说明这种排序算法是稳定的</code></pre><p><strong>排序算法</strong></p><p><strong>分类:内部排序,外部排序</strong></p><p><strong>区别:是否借用外部储存器</strong></p><h4 id="十大内部排序算法"><a href="#十大内部排序算法" class="headerlink" title="十大内部排序算法"></a><strong>十大内部排序算法</strong></h4><table><thead><tr><th>排序方法</th><th>含有方法</th></tr></thead><tbody><tr><td><strong>选择排序</strong></td><td><strong>直接选择排序,堆排序（#）</strong></td></tr><tr><td><strong>交换排序</strong></td><td><strong>冒泡排序（##）,快速排序（##）</strong></td></tr><tr><td><strong>插入排序</strong></td><td><strong>直接插入排序,折半插入排序,Shell排序(希尔排序)</strong></td></tr><tr><td><strong>归并排序</strong></td><td><strong>(#)</strong>—-</td></tr><tr><td><strong>桶式排序</strong></td><td>—-</td></tr><tr><td><strong>基数排序</strong></td><td>—-</td></tr></tbody></table><p><strong>前八种使用频率更高点(以上打#的均需要了解实现思路)</strong></p><h4 id="算法五大特征"><a href="#算法五大特征" class="headerlink" title="算法五大特征:"></a><strong>算法五大特征:</strong></h4><table><thead><tr><th>输入</th><th><strong>有0或多个输入数据,这些输入必须有清楚的描述和定义</strong></th></tr></thead><tbody><tr><td><strong>输出</strong></td><td><strong>至少有一个或多个输出结果,不能没有</strong></td></tr><tr><td><strong>有穷性</strong></td><td><strong>算法在有限步骤之后自动结束,无无限循环,并且每一个步骤可以在接收时间范围内完成</strong></td></tr><tr><td><strong>确定性</strong></td><td><strong>算法中的每一步都有明确含义,不出现歧义</strong></td></tr><tr><td><strong>可行性</strong></td><td><strong>算法的每一步都是清楚可行的,能让用户用纸笔计算而求出答案</strong></td></tr></tbody></table><h4 id="部分排序案例"><a href="#部分排序案例" class="headerlink" title="部分排序案例"></a>部分排序案例</h4><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序:"></a>冒泡排序:</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多种冒泡排序方式中的一种:</span><span class="token keyword">public</span> <span class="token keyword">class</span> 冒泡排序 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//answer:</span><span class="token number">13</span> <span class="token number">22</span> <span class="token number">53</span> <span class="token number">54</span> <span class="token number">54</span> <span class="token number">64</span> <span class="token number">66</span> <span class="token number">73</span> <span class="token number">89</span> </code></pre><h4 id="数组-Arrays工具类的使用"><a href="#数组-Arrays工具类的使用" class="headerlink" title="数组-Arrays工具类的使用"></a>数组-Arrays工具类的使用</h4><table><thead><tr><th>boolean equals(int[] a,int[] b)</th><th><strong>判断两数组是否相等</strong></th></tr></thead><tbody><tr><td><strong>String toString(int[] a)</strong></td><td><strong>输出数组信息</strong></td></tr><tr><td><strong>void fill(int[],int val)</strong></td><td><strong>将指定的值填充到数组中(全部替换)</strong></td></tr><tr><td><strong>void sort(int[] a)</strong></td><td><strong>对数组进行排序</strong></td></tr><tr><td><strong>Int binarySearch(int[] a,int key)</strong></td><td><strong>对排序后的数组进行二分法检索指定的值</strong></td></tr></tbody></table><p><strong>以上所有代码的使用方法:</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * java.util.Arrays:操作数组的的工具类,里面定义了很多操作数组的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraysText</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//boolean equals(int[] a,int[] b)</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isEquals <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isEquals<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        <span class="token comment" spellcheck="true">//String toString(int[] a)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span>        <span class="token comment" spellcheck="true">//void fill(int[],int val)</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[10,10,10,10]</span>        <span class="token comment" spellcheck="true">//void sort(int[] a)</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span>        <span class="token comment" spellcheck="true">//Int binarySearch(int[] a,int key)</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">155</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角标位置为:"</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原理:找到会返回角标位置,未找到会返回负数,负数的值由底层代码决定</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复制与赋值"><a href="#复制与赋值" class="headerlink" title="复制与赋值"></a>复制与赋值</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">,</span>array2<span class="token punctuation">;</span>array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>赋值:</p><pre class=" language-java"><code class="language-java">array2 <span class="token operator">=</span> array1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将array1保存的数组的地址值赋予了array2,使得array1与array2共同指向堆空间中的统一数组实体</span></code></pre><p>复制:</p><pre class=" language-java"><code class="language-java">array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>array1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过new的方式,给array2在堆空间中开辟了数组的空间,将array1数组中的元素值一个一个的赋值到array2数组中</span></code></pre><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>初学思路:</p><p><strong>java面向对象学习的三条主线:</strong></p><p><strong>1.Java类及类的成员:属性，方法，构造器；代码块，内部类(使用较少)</strong></p><p><strong>2.面向对象的三大特征:封装性,继承性,多态性,(抽象性)</strong></p><p><strong>3.其他关键字</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">this</span>    <span class="token keyword">super</span>   <span class="token keyword">static</span>   <span class="token keyword">final</span>   <span class="token keyword">abstract</span>   <span class="token keyword">interface</span>   <span class="token class-name">package</span>   <span class="token keyword">import</span> 等</code></pre><h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><p><strong>都是一种思想,面向对象是相对于面向过程而言的</strong></p><table><thead><tr><th></th><th>面向对象(POP)</th><th>面向过程(OOP)</th></tr></thead><tbody><tr><td><strong>强调内容</strong></td><td><strong>强调功能行为</strong></td><td><strong>强调具备了功能的对象</strong></td></tr><tr><td><strong>考虑内容</strong></td><td><strong>考虑怎么做</strong></td><td><strong>考虑谁来做</strong></td></tr><tr><td><strong>最小单位</strong></td><td><strong>函数</strong></td><td><strong>类/对象</strong></td></tr></tbody></table><p>举例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//人把大象装冰箱</span>面向过程<span class="token operator">:</span><span class="token punctuation">(</span>几个人的小公司<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span>把冰箱门打开<span class="token number">2</span><span class="token punctuation">.</span>抬起大象<span class="token punctuation">,</span>塞进冰箱<span class="token number">3</span><span class="token punctuation">.</span>把冰箱门关闭    面向对象<span class="token operator">:</span><span class="token punctuation">(</span>几百人的大公司<span class="token punctuation">)</span>要求具有的功能<span class="token operator">:</span>人<span class="token punctuation">{</span>    打开<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span>        冰箱<span class="token punctuation">.</span>开开<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    抬起<span class="token punctuation">(</span>大象<span class="token punctuation">)</span><span class="token punctuation">{</span>        大象<span class="token punctuation">.</span>进入<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span>；    <span class="token punctuation">}</span>    关闭<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span>        冰箱<span class="token punctuation">.</span>闭合<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>冰箱<span class="token punctuation">{</span>    开开<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    闭合<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>大象<span class="token punctuation">{</span>    进入<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="面向对象的思想概述"><a href="#面向对象的思想概述" class="headerlink" title="面向对象的思想概述"></a>面向对象的思想概述</h2><p><strong>程序员从面向过程的执行者转转化成了面向对象的指挥者</strong></p><p>面向对象分析方法分析问题的思路和步骤:</p><p><strong>1.根据问题需要,选择问题所针对的现实世界中的实体</strong></p><p><strong>2.从实体中寻找解决问题相关的属性和功能,这些属性和功能就形成了概念世界中的类</strong></p><p><strong>3.把抽象的实体用计算机语言进行描述,形成计算机世界中类的定义,即借助某种程序语言,把类构造成计算机能够识别和处理的数据结构</strong></p><p><strong>4.把类实例化成计算机世界中的对象(对象是计算机世界中解决问题的最终工具)</strong></p><p>例子:</p><pre class=" language-java"><code class="language-java">我要开车去成都<span class="token punctuation">,</span>其中包含的类有哪些<span class="token operator">?</span>我   车   成都<span class="token punctuation">(</span>看情况<span class="token punctuation">,</span>可以是类<span class="token punctuation">,</span>也可以是普通字符串<span class="token punctuation">)</span>售货员统计收获小票的金额售货员  小票</code></pre><h2 id="类和对象-？"><a href="#类和对象-？" class="headerlink" title="类和对象(？)"></a>类和对象(？)</h2><p><strong>类和对象是面向对象的核心概念</strong></p><p><strong>面向对象程序设计的重点是:类的设计,其实就是类的成员的设计</strong></p><h3 id="什么是类和对象"><a href="#什么是类和对象" class="headerlink" title="什么是类和对象?"></a>什么是类和对象?</h3><p><strong>类是对一类事物的描述,是抽象的,概念上的定义；</strong></p><p><strong>对象是实际存在的该类事物的每个个体,因而也被称为实例</strong></p><p><strong>（万物皆对象）</strong></p><p>例子:<strong>狗</strong></p><table><thead><tr><th>类</th><th>方法</th><th>对象</th><th>封装</th><th>继承</th><th>多态</th></tr></thead><tbody><tr><td><strong>犬类</strong></td><td><strong>狗叫,摇尾巴…</strong></td><td><strong>具体的某一条狗</strong></td><td><strong>狗的一系列行为,但不用知道是如何实现的</strong></td><td><strong>狗继承了祖先的一些行为</strong></td><td><strong>犬类,狗会听话,狼会嗷嗷叫</strong></td></tr></tbody></table><h3 id="设计类"><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h3><p><strong>属性 = 成员变量 = field = 域,字段</strong></p><p><strong>方法 = 成员方法 = 函数 = method</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注:不要让文件名与对象名相同(不区分大小写),否则会报错(原因目前不详,后续补充)</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonText</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建person类的对象</span>        person p1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Scanner scanner = new Scanner(System.in);</span>                <span class="token comment" spellcheck="true">//调用对象的结构,属性,方法</span>        <span class="token comment" spellcheck="true">//调用属性:"对象.属性"</span>        p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Reohy"</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span>isMale <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用方法:"对象.方法"</span>        p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">"Chinese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span>String language<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以说话,使用的语言是"</span><span class="token operator">+</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//answer:</span>Reohy人可以吃人可以睡觉人可以说话<span class="token punctuation">,</span>使用的语言是Chinese</code></pre><p><strong>注:如果创建了一个类的多个对象,则每个对象都拥有独立的拥有一套类的属性(非static的)</strong></p><p>上例子补充:</p><pre class=" language-java"><code class="language-java">person p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        p2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer补充</span><span class="token number">10</span></code></pre><p>补:<strong>类的方法内可以定义变量,调用属性,调用方法,但是不能定义方法</strong></p><h3 id="类-属性"><a href="#类-属性" class="headerlink" title="类.属性"></a>类.属性</h3><p><strong>属性(成员变量) vs 局部变量</strong></p><p>相同点</p><p><strong>1.定义变量的格式:数据类型  变量名 = 变量名</strong>  </p><p><strong>2.先声明,后使用</strong></p><p><strong>3、变量都有其对应作用域</strong></p><p>不同点</p><p><strong>1.在类中声明的位置的不同</strong></p><p><strong>属性:直接定义在类的一对{}中</strong></p><p><strong>局部变量:声明在方法内,方法形参,代码块内,构造器的形参,构造器内部的变量</strong></p><p><strong>2.关于权限修饰符的不同</strong></p><p><strong>属性:可以在声明属性时,指明其权限,使用权限修饰符</strong></p><p><strong>局部变量:不可以使用权限修饰符</strong></p><p><strong>//常见权限修饰符:</strong><code>private public 缺省 protected</code></p><p>（<strong>封装性后体会具体不同点</strong>）（？）</p><p><strong>3.默认初始化值的情况</strong></p><p><strong>属性:类的属性,根据其类型,都有默认初始化值</strong></p><p>意味着:<strong>在调用局部变量之前。一定要显示赋值,特别地,形参在调用时,我们赋值即可</strong></p><p><strong>4.在内存中加载的位置</strong></p><p><strong>属性:加载到堆空间中(非static)</strong></p><p><strong>局部变量:加载到栈空间中</strong></p><h3 id="类-方法"><a href="#类-方法" class="headerlink" title="类.方法"></a>类.方法</h3><p>方法:<strong>描述类应该具有的功能</strong></p><p>分类:</p><table><thead><tr><th></th><th>无返回值</th><th>有返回值</th></tr></thead><tbody><tr><td><strong>无形参</strong></td><td><strong>void  方法名(){}</strong></td><td><strong>返回值的类型  方法名(){}</strong></td></tr><tr><td><strong>有形参</strong></td><td><strong>void  方法名(形参列表){}</strong></td><td><strong>返回值的类型  方法名(形参列表){}</strong></td></tr></tbody></table><p>声明:<code>权限修饰符  返回值类型  方法名(形参列表){ 方法体 }</code></p><p>注:<strong>形参列表个数:[0,+∞);形参之间<code>,</code>隔开</strong></p><p>有返回值vs无返回值</p><p>代码示例:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerText</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 属性</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恰饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"休息了"</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"个小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getNation</span><span class="token punctuation">(</span>String nation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String info <span class="token operator">=</span> <span class="token string">"我的国籍是"</span> <span class="token operator">+</span> nation<span class="token punctuation">;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>1.如果方法有返回值,则必须在方法声明时,指定返回值的类型,同时方法中需要使用<code>return</code>关键字来返回指定类型的变量或常量</strong></p><p>无论如何,<strong>在任何条件下,都得有返回</strong></p><p><strong>没有返回值的话,则在方法声明时,使用void来表示,通常,没有返回值的方法中,就不使用<code>return</code>。但是如果使用的话,只有表示结束此方法的意思,该方法内的后面代码不再执行</strong></p><p>补:<code>return</code></p><p><strong>使用范围:使用在结构体中</strong></p><p>**作用:1.结束方法         **</p><p>​         <strong>2.针对于有返回值类型的方法,使用<code>return  数据</code>方法返回所要的数据</strong></p><p><strong>注意点:<code>return</code>关键字后面不可以申明执行语句</strong></p><p>eg.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//只写到这一步的话,会报错        </span>修改写法<span class="token operator">:</span><span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2.定义方法该不该有返回值</strong></p><p><strong>(1)题目要求</strong></p><p><strong>(2)凭经验,具体问题具体分析</strong></p><p>补充:</p><p><strong>方法的使用中,可以调用当前类的属性或方法</strong>，特殊的,如果自己调用自己,则叫递归</p><p>小技巧:</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210511211648432.png" alt="image-20210511211648432"></p><p><strong>可以使用<code>TAB</code>跳换到n</strong></p><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><p>声明与使用</p><pre class=" language-java"><code class="language-java">类名<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实例:</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span><span class="token operator">*</span>题目<span class="token operator">:</span>定义类Student<span class="token punctuation">,</span>包含三个属性<span class="token operator">:</span>学号<span class="token function">number</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>年级<span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>成绩<span class="token function">score</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>创建<span class="token number">20</span>个学生对象<span class="token punctuation">,</span>学号为<span class="token number">1</span>到<span class="token number">20</span><span class="token punctuation">,</span>年级和成绩都由随机数确定 <span class="token operator">*</span>问题一<span class="token operator">:</span>打印出<span class="token number">3</span>年级<span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>的学生信息 <span class="token operator">*</span>问题二<span class="token operator">:</span>使用冒泡排序按学生成绩排序<span class="token punctuation">,</span>并遍历所有学生信息</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentText1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明Student类型的数组</span>        Student1<span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student1</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上述是创造了一个数组,创造了20个对象,储存的是每个Student的对象的地址值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//给数组元素赋值</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//年级:[1,6]</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//成绩:[0,100]</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StudentText1 text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentText1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历学生数组</span>        text<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印三年级的学生信息</span>        text<span class="token punctuation">.</span><span class="token function">searchState</span><span class="token punctuation">(</span>stus<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序</span>        text<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span>        text<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**          *           * @Description  遍历Student1[]数组的操作          * @author Re0hy          * @date 2021年5月12日下午8:54:39          * @param stus          */</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Student1<span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/**          *           * @Description  查找Student1数组中指定年级的学生信息          * @author Re0hy          * @date 2021年5月12日下午8:51:24          * @param stus  要查找的数组          * @param state  要找的年级          */</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchState</span><span class="token punctuation">(</span>Student1<span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">,</span><span class="token keyword">int</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/**          *           * @Description 给Student1数组排序          * @author Re0hy          * @date 2021年5月12日下午8:53:27          * @param stus          */</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Student1<span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">>=</span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         Student1 temp <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                         stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                         stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//冒泡排序方式中的一种</span>                 <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student1</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年级</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成绩</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span>  <span class="token string">"学号:"</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">",年级:"</span><span class="token operator">+</span>state<span class="token operator">+</span><span class="token string">",成绩:"</span><span class="token operator">+</span>score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="编译软件部分"><a href="#编译软件部分" class="headerlink" title="编译软件部分:"></a><strong>编译软件部分:</strong></h1><h3 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a><strong>eclipse</strong></h3><h4 id="从其他地方导包"><a href="#从其他地方导包" class="headerlink" title="从其他地方导包"></a><strong>从其他地方导包</strong></h4><p><strong>1.File下选择import</strong></p><p><strong>2.<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427141608500.png" alt="image-20210427141608500"></strong></p><p><strong>选择<code>General</code></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427141652794.png" alt="image-20210427141652794"></strong></p><p><strong>点击进入,</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427141715202.png" alt="image-20210427141715202"></strong></p><p><strong>点击<code>Browse...</code>,选择要导入的包</strong></p><p><strong>出现如下警告:</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427141855856.png" alt="image-20210427141855856"></strong></p><p><strong>说明导入的包与你自己含有的包出现了工程重名</strong></p><p><strong>解决方案:</strong><br><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427142136966.png" alt="image-20210427142136966"></strong></p><p><strong>找到重名工程，如上操作，更改方程名</strong></p><p><strong>注意:更改包的文件名无效</strong></p><p><strong>其他部分注意事项:</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427142538123.png" alt="image-20210427142538123"></strong></p><p><strong>如果没有打钩,删除原包,会导致对应位置失去相应的包</strong></p><h4 id="从其他地方导入文件至指定包中"><a href="#从其他地方导入文件至指定包中" class="headerlink" title="从其他地方导入文件至指定包中"></a><strong>从其他地方导入文件至指定包中</strong></h4><p><strong>以<code>HelloJava.java</code>导入<code>com.atguigu.contact</code>为例</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427143525277.png" alt="image-20210427143525277"></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427143422823.png" alt="image-20210427143422823"></strong></p><p><strong>1.复制<code>HelloJava.java</code></strong></p><p><strong>2.选择<code>com.atguigu.contact</code>，ctrl+v即可</strong></p><p><strong>可能出现的问题:</strong></p><p><strong>1.乱码</strong></p><p><strong>解决方案:</strong></p><p><strong>1.<code>HelloJava.java</code>选择编码格式,变成utf-8,重新导入</strong></p><p><strong>2.用<code>Edit with Notepad++</code>打开<code>HelloJava.java</code>,选择格式,直接转换即可</strong></p><p><strong>2.开头不对应</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427144427863.png" alt="image-20210427144427863"></strong></p><p><strong>原因:写工程时,文件需要写明来源</strong></p><p><strong>解决方案:</strong></p><p><strong>最前面加上:<code>package+ 包名 +;</code></strong></p><h4 id="删除一个指定工程"><a href="#删除一个指定工程" class="headerlink" title="删除一个指定工程"></a><strong>删除一个指定工程</strong></h4><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427145226383.png" alt="image-20210427145226383"></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427145248290.png" alt="image-20210427145248290"></strong></p><p><strong>注意:如果钩上,这文件夹中的包也会被删除;如果没有钩上,只是将包导出,包的文件并未被删除</strong></p><h4 id="关闭暂时不需要的工程"><a href="#关闭暂时不需要的工程" class="headerlink" title="关闭暂时不需要的工程"></a><strong>关闭暂时不需要的工程</strong></h4><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427145837996.png"></strong></p><p><strong>如过需要打开,双击即可</strong></p><p><strong>如果需要不显示已经关闭了的工程:</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427150050432.png" alt="image-20210427150050432"></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427150130555.png" alt="image-20210427150130555"></strong></p><p><strong>勾选<code>Closed projects</code>,点击<code>OK</code>,即可</strong></p><p><strong>要显示被隐藏的工程:</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427150322178.png" alt="image-20210427150322178"></strong></p><h4 id="删除workplace中配置"><a href="#删除workplace中配置" class="headerlink" title="删除workplace中配置"></a><strong>删除workplace中配置</strong></h4><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427150717862.png" alt="image-20210427150717862"></strong></p><p><strong>里面保存着自己的配置</strong></p><h4 id="显示程序员的相关信息"><a href="#显示程序员的相关信息" class="headerlink" title="显示程序员的相关信息"></a><strong>显示程序员的相关信息</strong></h4><p><strong><code>Window--&gt;Preferences--&gt;Java--&gt;Code Style--&gt;Code Templates</code></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427151732212.png" alt="image-20210427151732212"></strong></p><p><strong>设置好后,在需要注释的位置写上<code>/**</code>,点击<code>ENTER</code>,就会自动生成</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427152637293.png" alt="image-20210427152637293"></strong></p><h4 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h4><p>以Arrays.sort()为例</p><p><code>ctrl+shift+t</code></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210509202827675.png" alt="image-20210509202827675"></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210509202911208.png" alt="image-20210509202911208"></p><p><code>ctrl+o</code></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210509202951517.png" alt="image-20210509202951517"></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210509203041018.png" alt="image-20210509203041018"></p><p>注:<code>void</code>表明没有返回值</p><h3 id="部分报错原因"><a href="#部分报错原因" class="headerlink" title="部分报错原因"></a>部分报错原因</h3><p>1.<strong>如果定义的<code>class</code>名字在同一个包内,则会出现报错</strong></p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">file</span> collision<span class="token operator">:</span> A resource exists with a different <span class="token keyword">case</span><span class="token operator">:</span> <span class="token string">'/Sgg_JavaStudy/bin/com/atguigu/java/person.class'</span><span class="token punctuation">.</span></code></pre><p>解决方法:</p><p><strong>更改class名,或删除之前同名的方法</strong></p><p>2.</p><h1 id="java虚拟机"><a href="#java虚拟机" class="headerlink" title="java虚拟机"></a><strong>java虚拟机</strong></h1><h3 id="1-JVM"><a href="#1-JVM" class="headerlink" title="1.JVM"></a><strong>1.JVM</strong></h3><p>  <strong>运行.java文件翻译后的.class文件</strong></p><h3 id="2-Dalvik"><a href="#2-Dalvik" class="headerlink" title="2.Dalvik"></a><strong>2.Dalvik</strong></h3><p><strong>Android 4.4 及以前均为Dalvik虚拟机,只执行.dex文件,此时dx会将.class文件转换为Dalvik虚拟机执行的.dex文件。Dalvik虚拟机将.dex文件转换为快速运行的机器码。如果有多个文件，会有一个和包过程，导致app打开慢。</strong></p><h3 id="3-ART"><a href="#3-ART" class="headerlink" title="3.ART"></a><strong>3.ART</strong></h3><p><strong>Android 5.0 后开始使用，ART虚拟机必须兼容Dalvik虚拟机特性，但ART有一个很好的特性AOT(ahead of time)，这个特性就是在我们安装APK的时候，将dex直接处理成ART虚拟机使用的机器码</strong></p><h3 id="JDK-JRE-JVM关系"><a href="#JDK-JRE-JVM关系" class="headerlink" title="JDK,JRE,JVM关系"></a><strong>JDK,JRE,JVM关系</strong></h3><p><strong>JDK = JRE +Java的开发工具 (<code>java.exe</code>,<code>javac.exe</code>,<code>javadoc.exe</code>)</strong><br><strong>JRE = JVM + Java核心内库</strong></p><h3 id="配置path环境变量"><a href="#配置path环境变量" class="headerlink" title="配置path环境变量"></a><strong>配置path环境变量</strong></h3><p><strong>原因:希望在任何路径下都能执行java的开发工具，指令</strong><br><strong>配置:</strong><br><strong>JAVA_HOME = bin的上一层目录</strong><br><strong>path = %JAVA_HOME%\BIN</strong></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h3><p><strong>Application Programming Interface，应用程序编程接口</strong></p>]]></content>
      
      
      <categories>
          
          <category> 归类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2021/09/08/test/"/>
      <url>/2021/09/08/test/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础知识点："><a href="#Java基础知识点：" class="headerlink" title="Java基础知识点："></a>Java基础知识点：</h1><h3 id="第一个java程序HelloWord"><a href="#第一个java程序HelloWord" class="headerlink" title="第一个java程序HelloWord:"></a>第一个java程序HelloWord:</h3><p><strong>步骤：<br>1.将java代码编写到扩展名为.java的文件中<br>2.通过javac命令对该java文件进行编译<br>3.通过java命令对生成的class文件进行运行</strong></p><p><strong><code>.java文件</code>(源文件)通过  <code>java.exe</code>编译成<code>.class文件</code>(字节码),再通过<code>java.exe</code>运行</strong></p><table><thead><tr><th>java关键字</th><th>均为小写字母</th></tr></thead><tbody><tr><td><strong>java保留字</strong></td><td>**现有版本还未使用,但后续版本肯能作为关键字使用,尽量不使用(goto||const) **</td></tr><tr><td>**java标识符 **</td><td><strong>对各种变量,方法和类等要素命名时使用的字符串序列(凡是自己命名的均为标识符)</strong></td></tr></tbody></table><p><strong>java类名与文件名</strong></p><p><strong>1.Java保存的文件名必须与类名一致；<br>2.如果文件中只有一个类，文件名必须与类名一致；<br>3.一个Java文件中只能有一个public类；<br>4.如果文件中不止一个类，文件名必须与public类名一致；<br>5.如果文件中不止一个类，而且没有public类，文件名可与任一类名一致。</strong></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><table><thead><tr><th>方式</th><th>表达方式</th><th>用法或者作用</th></tr></thead><tbody><tr><td><strong>单行注释</strong></td><td>// 这是一个单行注释</td><td><strong>对所写程序的进行解释说明,增强可读性。方便自己与他人</strong></td></tr><tr><td><strong>多行注释</strong></td><td>/*  这是一个多行注释   */</td><td><strong>对所写程序的进行解释说明,增强可读性。方便自己与他人</strong></td></tr><tr><td><strong>文档注释(java特有)</strong></td><td>/** 这是一个文档注释  */</td><td>**可以被javadoc解析,生成一套以网页文件形式体现的程序的说明文档 **</td></tr></tbody></table><p>文档注释实例:</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421130258676.png" alt="image-20210421130258676"></p><p>cmd中,对应位置输入<code>javadoc -d 文件名 -author -version 需要解析的.java</code></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421131355725.png" alt="image-20210421131355725"></p><p><strong>注意:如果类名与文件名不一致，会出现报错</strong></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421131833754.png" alt="image-20210421131833754"></p><p>打开MyJava文件,双击点开index.html</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421131937278.png" alt="image-20210421131937278"></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210421132057920.png" alt="image-20210421132057920"></p><p>文档注释(补):</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210510211446229.png" alt="image-20210510211446229"></p><p>调用时</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210510211536098.png" alt="image-20210510211536098"></p><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><table><thead><tr><th>进制</th><th>表现形式</th></tr></thead><tbody><tr><td>二进制</td><td><strong>满2进1,以0B或者0b开头</strong></td></tr><tr><td>八进制</td><td><strong>满8进1,以0开头</strong></td></tr><tr><td>十进制</td><td><strong>满10进1</strong></td></tr><tr><td>十六进制</td><td><strong>满16进1,以0x或0X开头</strong></td></tr></tbody></table><p>补充:<strong>(0代表正数,1代表负数)</strong></p><table><thead><tr><th>二进制</th><th>正数</th><th>负数</th></tr></thead><tbody><tr><td>原码</td><td><strong>最高位是符号位,其余各位为数值本身的绝对值</strong></td><td><strong>最高位是符号位,其余各位为数值本身的绝对值</strong></td></tr><tr><td>反码</td><td><strong>反码与原码相同</strong></td><td><strong>最高位(符号位)确认为1,其余位对原码取反</strong></td></tr><tr><td>补码</td><td><strong>补码与原码相同</strong></td><td><strong>最高位(符号位)为1,其余位对原码取反加1</strong></td></tr></tbody></table><p><strong>计算机底层都以补码的方式来储存数据</strong></p><p><strong>转换:</strong></p><table><thead><tr><th>二进制转换成八进制</th><th>左往右三合一,不足补零</th></tr></thead><tbody><tr><td><strong>二进制转换成十六进制</strong></td><td><strong>左往右四合一,不足补零</strong></td></tr></tbody></table><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>&amp;–逻辑与</th><th>|–逻辑或</th><th>！–逻辑非</th><th>&amp;&amp;–短路与</th><th>||–短路或</th><th>^–逻辑异或</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>符号</th><th>相同点</th><th>不同点</th></tr></thead><tbody><tr><td>&amp;,&amp;&amp;</td><td><strong>运算结果相同;当符号左边是true时,二者都会执行符号右边的运算</strong></td><td><strong>当符号左边是false时,&amp;继续执行符号右边的运算,&amp;&amp;则不再执行</strong></td></tr><tr><td>|,||</td><td><strong>运算结果相同;当符号左边是false时,二者都会执行符号右边的运算</strong></td><td><strong>当符号左边是true时,|继续执行符号右边的运算,||则不再执行</strong></td></tr></tbody></table><p><strong>开发中,推荐使用短路符号</strong></p><p>实例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logic_and_short_circuit_practice</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;</span> y1<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x1 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x1 = "</span><span class="token operator">+</span> x1 <span class="token operator">+</span> <span class="token string">",y1 = "</span><span class="token operator">+</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x2<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> y2<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x2 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x2 = "</span><span class="token operator">+</span> x2 <span class="token operator">+</span> <span class="token string">",y2 = "</span><span class="token operator">+</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x3<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">|</span> y3<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x3 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x3 = "</span><span class="token operator">+</span> x3 <span class="token operator">+</span> <span class="token string">",y3 = "</span><span class="token operator">+</span> y3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x4<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> y4<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x4 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x4 = "</span><span class="token operator">+</span> x4 <span class="token operator">+</span> <span class="token string">",y4 = "</span><span class="token operator">+</span> y4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*answer:x1 = 2,y1 = 2x2 = 2,y2 = 1x3 = 2,y3 = 2x4 = 2,y4 = 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table><thead><tr><th>运算符</th><th>&lt;&lt;</th><th>&gt;&gt;</th><th>&gt;&gt;&gt;</th><th>&amp;</th><th>|</th><th>^</th><th>~</th></tr></thead><tbody><tr><td><strong>运算</strong></td><td>**左移 **</td><td>**右移     **</td><td>**无符号位移  **</td><td>**与运算 **</td><td><strong>或运算</strong></td><td>**异或运算 **</td><td><strong>取反运算</strong></td></tr><tr><td>**范例   **</td><td><strong>3&lt;&lt;2=12  ==  3x2x2=12</strong></td><td><strong>3&gt;&gt;1=1 == 3/2=1</strong></td><td>**3&gt;&gt;&gt;1=1 == 3/2=1 **</td><td>**6&amp;3=2 **</td><td><strong>6|3=7</strong></td><td>**6^3=5    **</td><td>**~6=-7    **</td></tr></tbody></table><p><strong>注释:位运算是直接对整数的二进制进行的运算</strong></p><table><thead><tr><th>&amp;</th><th>全为一才为一,其余均为零</th></tr></thead><tbody><tr><td><strong>|</strong></td><td><strong>全零才为零</strong></td></tr><tr><td><strong>^</strong></td><td><strong>全为零或者一均为零</strong></td></tr><tr><td><strong>~</strong></td><td><strong>一变零,零变一</strong></td></tr></tbody></table><p><strong>以12&amp;5=4为例:</strong></p><table><thead><tr><th>初始:</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>12</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td><strong>5</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td><strong>结果:</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>4</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr></tbody></table><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><table><thead><tr><th>结构</th><th>(条件表达式)？表达式1：表达式2</th></tr></thead><tbody><tr><td><strong>含义</strong></td><td><strong>条件表达式为true,执行表达式1;为false,执行表达式2</strong></td></tr></tbody></table><p><strong>注释:并未强制要求表达式的类型,但最好是一致的,最终类型取决于你的接受变量的类型,</strong></p><p><strong>实例:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//需求:获取三个数中的最大值</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SggP83</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3<span class="token operator">=</span><span class="token operator">-</span><span class="token number">43</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int max1 = (n1 > n2)? n1 : n2;</span>        <span class="token comment" spellcheck="true">//int max2 = (max1 > n3)? max1 : n3;</span>        <span class="token keyword">int</span> max3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">)</span> <span class="token operator">></span> n3<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">)</span> <span class="token operator">:</span> n3<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三个数中最大的值为:"</span><span class="token operator">+</span>max3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//演示三元运算符嵌套运用,不推荐使用</span><span class="token comment" spellcheck="true">/*answer:三个数中最大的值为:30*/</span><span class="token comment" spellcheck="true">//能使用三元运算符的地方,均可写成if-else</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p><strong>如何从键盘获取不同类型的变量:需要使用Scanner类</strong></p><p><strong>具体实现步骤:</strong><br><strong>1.导包:<code>import java.util.Scanner;</code></strong><br><strong>2.Scanner的实例化:<code>Scanner scan = new Scanner(System.in);</code></strong><br><strong>3.调用Scanner类的相关方法,来获取指定类型的变量</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//简单代码</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SggP92_Scanner_Text</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input A-D:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ENGLISH <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input a-d:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String english <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input 1314:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number1 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input 5.2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> number2 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input true or false:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对于char的获取,Scanner没有提供相关的方法,只能获取一个字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input boy or girl:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String character <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> character<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取索引为0位置上的字符</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Answer:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ENGLISH<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>english<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>number1<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>number2<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>bool<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Input A-D:ABCDInput a-d:abcdInput 1314:1314Input 5.2:5.2Input true or false:trueInput boy or girl:boyAnswer:ABCDabcd13145.2trueb*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果要进行字符串判断是否相等,请使用<code> .euqls("比对内容")</code>,实例:SggP99.java</strong></p><h3 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h3><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><strong>具体实现步骤:</strong></p><p><strong>1.导包:<code>import java.util.Random;</code></strong></p><p><strong>2.Random的实例化: eg.</strong><code>Random xxx = new Random();</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> XXX <span class="token operator">=</span> xxx<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b为最低值,a+b-1为最高值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//随机生成1~10的数字</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 随机数测试 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> Rand <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Rand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造方法：</strong><br><strong>(1)public Random()</strong><br><strong>(2)public Random(long seed)</strong><br><strong>Java产生随机数需要有一个基值seed，在第一种方法中基值缺省，则将系统时间作为seed。</strong></p><p><strong>普通方法：</strong></p><table><thead><tr><th><strong>产生随机数类型</strong></th><th><strong>构造</strong></th><th>原理</th></tr></thead><tbody><tr><td><strong>整型</strong></td><td><strong>nextInt();</strong></td><td><strong>返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值。</strong></td></tr><tr><td><strong>long型</strong></td><td><strong>nextLong();</strong></td><td><strong>返回下一个伪随机数，它是从此随机数生成器的序列中取出的、均匀分布的 long 值。</strong></td></tr><tr><td><strong>float型</strong></td><td><strong>nextFloat();</strong></td><td><strong>返回下一个伪随机数，它是从此随机数生成器的序列中取出的、在 0.0 和 1.0之间均匀分布的 double 值。</strong></td></tr><tr><td><strong>double型</strong></td><td><strong>nextDouble();</strong></td><td><strong>返回下一个伪随机数，它是从此随机数生成器的序列中取出的、在 0.0 和 1.0 之间均匀分布的 float 值。</strong></td></tr><tr><td><strong>double型的Goussian</strong></td><td><strong>nextGoussian();</strong></td><td><strong>返回下一个伪随机数，它是从此随机数生成器的序列中取出的、呈高斯(“正常地”)分布的 double 值，其平均值是 0.0，标准偏差是 1.0。</strong></td></tr><tr><td><strong>boolean型</strong></td><td><strong>nextBoolean();</strong></td><td><strong>该方法的作用是生成一个随机的boolean值，生成true和false的值几率相等，也就是都是50%的几率。</strong></td></tr></tbody></table><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>公式:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//随机数范围:[a,b]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Math.random()=[0.0,1.0)</span><span class="token comment" spellcheck="true">//a=max,b=min</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取一个位于[10,99]的随机数</span><span class="token comment" spellcheck="true">//仅补充关键代码</span><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><p>略</p><h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h4><p><strong>只能匹配值,不能判断范围</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//尝试switch-case</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SggP100</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Input number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*answerInput number:1one*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注:如果没有break,会将匹配对应的代码后面的值一并打印出来</strong></p><p><strong>switch结构中的表达式,只能为如下六种类型</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">byte</span>  <span class="token keyword">short</span>  <span class="token keyword">char</span>  <span class="token keyword">int</span>  枚举类型<span class="token punctuation">(</span>JDK5<span class="token number">.0</span>新增<span class="token punctuation">)</span>  <span class="token function">String</span><span class="token punctuation">(</span>JDK7<span class="token number">.0</span>新增<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><h4 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h4><p><strong>略</strong></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><strong>定义:多个相同类型数据按一定顺序排列的集合,并使用同一个名字命名,并通过编号的方式对这些数据进行统一管理</strong></p><p><strong>数组一旦初始化,其长度就会确定且不能修改</strong></p><h4 id="数组元素的默认初始化值"><a href="#数组元素的默认初始化值" class="headerlink" title="数组元素的默认初始化值"></a><strong>数组元素的默认初始化值</strong></h4><table><thead><tr><th>数组元素类型</th><th>整型</th><th>浮点型</th><th>char型</th><th>boolean型</th><th>引用数据类型(数组,类,接口)</th></tr></thead><tbody><tr><td><strong>对应默认初始化值</strong></td><td><strong>0</strong></td><td><strong>0.0</strong></td><td><strong>0或’\u0000’(并非’0’)</strong></td><td><strong>false</strong></td><td><strong>null</strong></td></tr></tbody></table><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayText</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数组声明和初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.1静态初始化;数组的初始化和数组的赋值操作同时进行</span>        ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.2动态初始化;分开进行</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组一旦初始化完成,数组长度确定</span>        <span class="token comment" spellcheck="true">//调用数组中的指定位置的元素:角标调用,从零开始,到数组长度-1结束</span>        names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Daisy"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Army"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Bob"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Tony"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Alice"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明(int为例)</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p><strong>实际上,从数组底层的运行机制来说,并没有多维数组</strong>  </p><p>规定:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二维数组分为外层数组元素,与内层数组元素</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>外层元素<span class="token operator">:</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>等内层元素<span class="token operator">:</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>声明:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//(int为例)</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> or <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态初始化</span>部分正确写法<span class="token operator">:</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型判断,如果分行或者String都不能省</span><span class="token punctuation">(</span>eg<span class="token operator">:</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">;</span>ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用:类似于一维数组的调用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如下定义:</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行下面操作:</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现报错:</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NullPointerException    at ceshi<span class="token punctuation">.</span>ceshi1<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>ceshi1<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取长度:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//以 int[] arr[] = new int[][]{{1,2,3},{4,5},{6,7,8}}; 为例:</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer:3</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer:3</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer:2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//以刚才的获取长度中的例子为例</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//几维数组就需要几层循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认初始化值:</p><table><thead><tr><th>查找元素类型</th><th>初始化过</th><th>未初始化过</th></tr></thead><tbody><tr><td><strong>外层元素</strong></td><td><strong>一个指向内层元素数组的地址值</strong></td><td><strong>null</strong></td></tr><tr><td><strong>内层元素</strong></td><td><strong>参照一维数组的默认初始化值</strong></td><td><strong>报错(如下)</strong></td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NullPointerException    at ceshi<span class="token punctuation">.</span>ceshi1<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>ceshi1<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>补充:未初始化实例–&gt;<code>int[][] arr = new int[4][];</code>,即未创建内层元素</strong></p><p>部分练习:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明: int[] x,y[];在给x,y变量赋值以后,下列选项可以通过编译的有:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>            noy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            yesy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        nox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>        noy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        yesx <span class="token operator">=</span> y<span class="token punctuation">;</span>                no<span class="token comment" spellcheck="true">//可以同样类型赋值,或者满足自动类型提升要求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组中指定元素的查找"><a href="#数组中指定元素的查找" class="headerlink" title="数组中指定元素的查找"></a>数组中指定元素的查找</h4><h5 id="1-线性查找"><a href="#1-线性查找" class="headerlink" title="1.线性查找"></a>1.线性查找</h5><p><strong>实现思路:通过遍历的方式,一个一个的数据进行比较,查找</strong></p><p><strong>适用性:具有普遍适用性</strong></p><h5 id="2-二分法查找"><a href="#2-二分法查找" class="headerlink" title="2.二分法查找"></a>2.二分法查找</h5><p><strong>实现思路:每次比较中间值,折半的方式检索</strong></p><p><strong>适用性:数组必须有序</strong></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="1-数据与数据之间的关系"><a href="#1-数据与数据之间的关系" class="headerlink" title="1.数据与数据之间的关系:"></a>1.数据与数据之间的关系:</h4><p><strong>集合,一对一,一对多,多对多</strong></p><h4 id="2-数据的存储结构"><a href="#2-数据的存储结构" class="headerlink" title="2.数据的存储结构:"></a>2.数据的存储结构:</h4><p><strong>线性表(一对一的关系):顺序表(eg.数组),链表,栈,队列</strong></p><p><strong>树形结构(一对多的关系):二叉树</strong></p><p><strong>图形结构(多对多的关系)</strong></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="衡量算法的优劣"><a href="#衡量算法的优劣" class="headerlink" title="衡量算法的优劣:"></a><strong>衡量算法的优劣:</strong></h4><p><strong><em>1.时间复杂度</em>:分析关键字的比较次数和记录的移动次数</strong></p><p><strong><em>2.空间复杂度</em>:分析排序算法中需要多少辅助内存</strong></p><p><strong><em>3.稳定性</em>:若两个记录A和B的关键字值相等,但排序后A,B的先后次序保持不变,则这种排序算法是稳定的</strong></p><pre class="line-numbers language-java"><code class="language-java">稳定性列举<span class="token operator">:</span>排序前<span class="token operator">:</span><span class="token comment" spellcheck="true">//{3,2,1,4,5,3'};</span>若排序后<span class="token operator">:</span><span class="token comment" spellcheck="true">//{1,2,3,3',4,5};</span>说明这种排序算法是稳定的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>排序算法</strong></p><p><strong>分类:内部排序,外部排序</strong></p><p><strong>区别:是否借用外部储存器</strong></p><h4 id="十大内部排序算法"><a href="#十大内部排序算法" class="headerlink" title="十大内部排序算法"></a><strong>十大内部排序算法</strong></h4><table><thead><tr><th>排序方法</th><th>含有方法</th></tr></thead><tbody><tr><td><strong>选择排序</strong></td><td><strong>直接选择排序,堆排序（#）</strong></td></tr><tr><td><strong>交换排序</strong></td><td><strong>冒泡排序（##）,快速排序（##）</strong></td></tr><tr><td><strong>插入排序</strong></td><td><strong>直接插入排序,折半插入排序,Shell排序(希尔排序)</strong></td></tr><tr><td><strong>归并排序</strong></td><td><strong>(#)</strong>—-</td></tr><tr><td><strong>桶式排序</strong></td><td>—-</td></tr><tr><td><strong>基数排序</strong></td><td>—-</td></tr></tbody></table><p><strong>前八种使用频率更高点(以上打#的均需要了解实现思路)</strong></p><h4 id="算法五大特征"><a href="#算法五大特征" class="headerlink" title="算法五大特征:"></a><strong>算法五大特征:</strong></h4><table><thead><tr><th>输入</th><th><strong>有0或多个输入数据,这些输入必须有清楚的描述和定义</strong></th></tr></thead><tbody><tr><td><strong>输出</strong></td><td><strong>至少有一个或多个输出结果,不能没有</strong></td></tr><tr><td><strong>有穷性</strong></td><td><strong>算法在有限步骤之后自动结束,无无限循环,并且每一个步骤可以在接收时间范围内完成</strong></td></tr><tr><td><strong>确定性</strong></td><td><strong>算法中的每一步都有明确含义,不出现歧义</strong></td></tr><tr><td><strong>可行性</strong></td><td><strong>算法的每一步都是清楚可行的,能让用户用纸笔计算而求出答案</strong></td></tr></tbody></table><h4 id="部分排序案例"><a href="#部分排序案例" class="headerlink" title="部分排序案例"></a>部分排序案例</h4><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序:"></a>冒泡排序:</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多种冒泡排序方式中的一种:</span><span class="token keyword">public</span> <span class="token keyword">class</span> 冒泡排序 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//answer:</span><span class="token number">13</span> <span class="token number">22</span> <span class="token number">53</span> <span class="token number">54</span> <span class="token number">54</span> <span class="token number">64</span> <span class="token number">66</span> <span class="token number">73</span> <span class="token number">89</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组-Arrays工具类的使用"><a href="#数组-Arrays工具类的使用" class="headerlink" title="数组-Arrays工具类的使用"></a>数组-Arrays工具类的使用</h4><table><thead><tr><th>boolean equals(int[] a,int[] b)</th><th><strong>判断两数组是否相等</strong></th></tr></thead><tbody><tr><td><strong>String toString(int[] a)</strong></td><td><strong>输出数组信息</strong></td></tr><tr><td><strong>void fill(int[],int val)</strong></td><td><strong>将指定的值填充到数组中(全部替换)</strong></td></tr><tr><td><strong>void sort(int[] a)</strong></td><td><strong>对数组进行排序</strong></td></tr><tr><td><strong>Int binarySearch(int[] a,int key)</strong></td><td><strong>对排序后的数组进行二分法检索指定的值</strong></td></tr></tbody></table><p><strong>以上所有代码的使用方法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * java.util.Arrays:操作数组的的工具类,里面定义了很多操作数组的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraysText</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//boolean equals(int[] a,int[] b)</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isEquals <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isEquals<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        <span class="token comment" spellcheck="true">//String toString(int[] a)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span>        <span class="token comment" spellcheck="true">//void fill(int[],int val)</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[10,10,10,10]</span>        <span class="token comment" spellcheck="true">//void sort(int[] a)</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span>        <span class="token comment" spellcheck="true">//Int binarySearch(int[] a,int key)</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">155</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角标位置为:"</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原理:找到会返回角标位置,未找到会返回负数,负数的值由底层代码决定</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复制与赋值"><a href="#复制与赋值" class="headerlink" title="复制与赋值"></a>复制与赋值</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">,</span>array2<span class="token punctuation">;</span>array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>赋值:</p><pre class="line-numbers language-java"><code class="language-java">array2 <span class="token operator">=</span> array1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将array1保存的数组的地址值赋予了array2,使得array1与array2共同指向堆空间中的统一数组实体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制:</p><pre class="line-numbers language-java"><code class="language-java">array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>array1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过new的方式,给array2在堆空间中开辟了数组的空间,将array1数组中的元素值一个一个的赋值到array2数组中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>初学思路:</p><p><strong>java面向对象学习的三条主线:</strong></p><p><strong>1.Java类及类的成员:属性，方法，构造器；代码块，内部类(使用较少)</strong></p><p><strong>2.面向对象的三大特征:封装性,继承性,多态性,(抽象性)</strong></p><p><strong>3.其他关键字</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">this</span>    <span class="token keyword">super</span>   <span class="token keyword">static</span>   <span class="token keyword">final</span>   <span class="token keyword">abstract</span>   <span class="token keyword">interface</span>   <span class="token class-name">package</span>   <span class="token keyword">import</span> 等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><p><strong>都是一种思想,面向对象是相对于面向过程而言的</strong></p><table><thead><tr><th></th><th>面向对象(POP)</th><th>面向过程(OOP)</th></tr></thead><tbody><tr><td><strong>强调内容</strong></td><td><strong>强调功能行为</strong></td><td><strong>强调具备了功能的对象</strong></td></tr><tr><td><strong>考虑内容</strong></td><td><strong>考虑怎么做</strong></td><td><strong>考虑谁来做</strong></td></tr><tr><td><strong>最小单位</strong></td><td><strong>函数</strong></td><td><strong>类/对象</strong></td></tr></tbody></table><p>举例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//人把大象装冰箱</span>面向过程<span class="token operator">:</span><span class="token punctuation">(</span>几个人的小公司<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span>把冰箱门打开<span class="token number">2</span><span class="token punctuation">.</span>抬起大象<span class="token punctuation">,</span>塞进冰箱<span class="token number">3</span><span class="token punctuation">.</span>把冰箱门关闭    面向对象<span class="token operator">:</span><span class="token punctuation">(</span>几百人的大公司<span class="token punctuation">)</span>要求具有的功能<span class="token operator">:</span>人<span class="token punctuation">{</span>    打开<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span>        冰箱<span class="token punctuation">.</span>开开<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    抬起<span class="token punctuation">(</span>大象<span class="token punctuation">)</span><span class="token punctuation">{</span>        大象<span class="token punctuation">.</span>进入<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span>；    <span class="token punctuation">}</span>    关闭<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span>        冰箱<span class="token punctuation">.</span>闭合<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>冰箱<span class="token punctuation">{</span>    开开<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    闭合<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>大象<span class="token punctuation">{</span>    进入<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面向对象的思想概述"><a href="#面向对象的思想概述" class="headerlink" title="面向对象的思想概述"></a>面向对象的思想概述</h2><p><strong>程序员从面向过程的执行者转转化成了面向对象的指挥者</strong></p><p>面向对象分析方法分析问题的思路和步骤:</p><p><strong>1.根据问题需要,选择问题所针对的现实世界中的实体</strong></p><p><strong>2.从实体中寻找解决问题相关的属性和功能,这些属性和功能就形成了概念世界中的类</strong></p><p><strong>3.把抽象的实体用计算机语言进行描述,形成计算机世界中类的定义,即借助某种程序语言,把类构造成计算机能够识别和处理的数据结构</strong></p><p><strong>4.把类实例化成计算机世界中的对象(对象是计算机世界中解决问题的最终工具)</strong></p><p>例子:</p><pre class="line-numbers language-java"><code class="language-java">我要开车去成都<span class="token punctuation">,</span>其中包含的类有哪些<span class="token operator">?</span>我   车   成都<span class="token punctuation">(</span>看情况<span class="token punctuation">,</span>可以是类<span class="token punctuation">,</span>也可以是普通字符串<span class="token punctuation">)</span>售货员统计收获小票的金额售货员  小票<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类和对象-？"><a href="#类和对象-？" class="headerlink" title="类和对象(？)"></a>类和对象(？)</h2><p><strong>类和对象是面向对象的核心概念</strong></p><p><strong>面向对象程序设计的重点是:类的设计,其实就是类的成员的设计</strong></p><h3 id="什么是类和对象"><a href="#什么是类和对象" class="headerlink" title="什么是类和对象?"></a>什么是类和对象?</h3><p><strong>类是对一类事物的描述,是抽象的,概念上的定义；</strong></p><p><strong>对象是实际存在的该类事物的每个个体,因而也被称为实例</strong></p><p><strong>（万物皆对象）</strong></p><p>例子:<strong>狗</strong></p><table><thead><tr><th>类</th><th>方法</th><th>对象</th><th>封装</th><th>继承</th><th>多态</th></tr></thead><tbody><tr><td><strong>犬类</strong></td><td><strong>狗叫,摇尾巴…</strong></td><td><strong>具体的某一条狗</strong></td><td><strong>狗的一系列行为,但不用知道是如何实现的</strong></td><td><strong>狗继承了祖先的一些行为</strong></td><td><strong>犬类,狗会听话,狼会嗷嗷叫</strong></td></tr></tbody></table><h3 id="设计类"><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h3><p><strong>属性 = 成员变量 = field = 域,字段</strong></p><p><strong>方法 = 成员方法 = 函数 = method</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注:不要让文件名与对象名相同(不区分大小写),否则会报错(原因目前不详,后续补充)</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonText</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建person类的对象</span>        person p1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Scanner scanner = new Scanner(System.in);</span>                <span class="token comment" spellcheck="true">//调用对象的结构,属性,方法</span>        <span class="token comment" spellcheck="true">//调用属性:"对象.属性"</span>        p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Reohy"</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span>isMale <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用方法:"对象.方法"</span>        p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">"Chinese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span>String language<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以说话,使用的语言是"</span><span class="token operator">+</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//answer:</span>Reohy人可以吃人可以睡觉人可以说话<span class="token punctuation">,</span>使用的语言是Chinese<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注:如果创建了一个类的多个对象,则每个对象都拥有独立的拥有一套类的属性(非static的)</strong></p><p>上例子补充:</p><pre class="line-numbers language-java"><code class="language-java">person p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        p2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer补充</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补:<strong>类的方法内可以定义变量,调用属性,调用方法,但是不能定义方法</strong></p><h3 id="类-属性"><a href="#类-属性" class="headerlink" title="类.属性"></a>类.属性</h3><p><strong>属性(成员变量) vs 局部变量</strong></p><p>相同点</p><p><strong>1.定义变量的格式:数据类型  变量名 = 变量名</strong>  </p><p><strong>2.先声明,后使用</strong></p><p><strong>3、变量都有其对应作用域</strong></p><p>不同点</p><p><strong>1.在类中声明的位置的不同</strong></p><p><strong>属性:直接定义在类的一对{}中</strong></p><p><strong>局部变量:声明在方法内,方法形参,代码块内,构造器的形参,构造器内部的变量</strong></p><p><strong>2.关于权限修饰符的不同</strong></p><p><strong>属性:可以在声明属性时,指明其权限,使用权限修饰符</strong></p><p><strong>局部变量:不可以使用权限修饰符</strong></p><p><strong>//常见权限修饰符:</strong><code>private public 缺省 protected</code></p><p>（<strong>封装性后体会具体不同点</strong>）（？）</p><p><strong>3.默认初始化值的情况</strong></p><p><strong>属性:类的属性,根据其类型,都有默认初始化值</strong></p><p>意味着:<strong>在调用局部变量之前。一定要显示赋值,特别地,形参在调用时,我们赋值即可</strong></p><p><strong>4.在内存中加载的位置</strong></p><p><strong>属性:加载到堆空间中(非static)</strong></p><p><strong>局部变量:加载到栈空间中</strong></p><h3 id="类-方法"><a href="#类-方法" class="headerlink" title="类.方法"></a>类.方法</h3><p>方法:<strong>描述类应该具有的功能</strong></p><p>分类:</p><table><thead><tr><th></th><th>无返回值</th><th>有返回值</th></tr></thead><tbody><tr><td><strong>无形参</strong></td><td><strong>void  方法名(){}</strong></td><td><strong>返回值的类型  方法名(){}</strong></td></tr><tr><td><strong>有形参</strong></td><td><strong>void  方法名(形参列表){}</strong></td><td><strong>返回值的类型  方法名(形参列表){}</strong></td></tr></tbody></table><p>声明:<code>权限修饰符  返回值类型  方法名(形参列表){ 方法体 }</code></p><p>注:<strong>形参列表个数:[0,+∞);形参之间<code>,</code>隔开</strong></p><p>有返回值vs无返回值</p><p>代码示例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerText</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 属性</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恰饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"休息了"</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"个小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getNation</span><span class="token punctuation">(</span>String nation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String info <span class="token operator">=</span> <span class="token string">"我的国籍是"</span> <span class="token operator">+</span> nation<span class="token punctuation">;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.如果方法有返回值,则必须在方法声明时,指定返回值的类型,同时方法中需要使用<code>return</code>关键字来返回指定类型的变量或常量</strong></p><p>无论如何,<strong>在任何条件下,都得有返回</strong></p><p><strong>没有返回值的话,则在方法声明时,使用void来表示,通常,没有返回值的方法中,就不使用<code>return</code>。但是如果使用的话,只有表示结束此方法的意思,该方法内的后面代码不再执行</strong></p><p>补:<code>return</code></p><p><strong>使用范围:使用在结构体中</strong></p><p>**作用:1.结束方法         **</p><p>​         <strong>2.针对于有返回值类型的方法,使用<code>return  数据</code>方法返回所要的数据</strong></p><p><strong>注意点:<code>return</code>关键字后面不可以申明执行语句</strong></p><p>eg.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//只写到这一步的话,会报错        </span>修改写法<span class="token operator">:</span><span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.定义方法该不该有返回值</strong></p><p><strong>(1)题目要求</strong></p><p><strong>(2)凭经验,具体问题具体分析</strong></p><p>补充:</p><p><strong>方法的使用中,可以调用当前类的属性或方法</strong>，特殊的,如果自己调用自己,则叫递归</p><p>小技巧:</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210511211648432.png" alt="image-20210511211648432"></p><p><strong>可以使用<code>TAB</code>跳换到n</strong></p><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><p>声明与使用</p><pre class="line-numbers language-java"><code class="language-java">类名<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">/</span><span class="token operator">*</span>题目<span class="token operator">:</span>定义类Student<span class="token punctuation">,</span>包含三个属性<span class="token operator">:</span>学号<span class="token function">number</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>年级<span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>成绩<span class="token function">score</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>创建<span class="token number">20</span>个学生对象<span class="token punctuation">,</span>学号为<span class="token number">1</span>到<span class="token number">20</span><span class="token punctuation">,</span>年级和成绩都由随机数确定 <span class="token operator">*</span>问题一<span class="token operator">:</span>打印出<span class="token number">3</span>年级<span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>的学生信息 <span class="token operator">*</span>问题二<span class="token operator">:</span>使用冒泡排序按学生成绩排序<span class="token punctuation">,</span>并遍历所有学生信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentText1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明Student类型的数组</span>        Student1<span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student1</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上述是创造了一个数组,创造了20个对象,储存的是每个Student的对象的地址值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//给数组元素赋值</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//年级:[1,6]</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//成绩:[0,100]</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StudentText1 text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentText1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历学生数组</span>        text<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印三年级的学生信息</span>        text<span class="token punctuation">.</span><span class="token function">searchState</span><span class="token punctuation">(</span>stus<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序</span>        text<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span>        text<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**          *           * @Description  遍历Student1[]数组的操作          * @author Re0hy          * @date 2021年5月12日下午8:54:39          * @param stus          */</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Student1<span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/**          *           * @Description  查找Student1数组中指定年级的学生信息          * @author Re0hy          * @date 2021年5月12日下午8:51:24          * @param stus  要查找的数组          * @param state  要找的年级          */</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchState</span><span class="token punctuation">(</span>Student1<span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">,</span><span class="token keyword">int</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/**          *           * @Description 给Student1数组排序          * @author Re0hy          * @date 2021年5月12日下午8:53:27          * @param stus          */</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Student1<span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">>=</span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         Student1 temp <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                         stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                         stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//冒泡排序方式中的一种</span>                 <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student1</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年级</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成绩</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span>  <span class="token string">"学号:"</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">",年级:"</span><span class="token operator">+</span>state<span class="token operator">+</span><span class="token string">",成绩:"</span><span class="token operator">+</span>score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编译软件部分"><a href="#编译软件部分" class="headerlink" title="编译软件部分:"></a><strong>编译软件部分:</strong></h1><h3 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a><strong>eclipse</strong></h3><h4 id="从其他地方导包"><a href="#从其他地方导包" class="headerlink" title="从其他地方导包"></a><strong>从其他地方导包</strong></h4><p><strong>1.File下选择import</strong></p><p><strong>2.<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427141608500.png" alt="image-20210427141608500"></strong></p><p><strong>选择<code>General</code></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427141652794.png" alt="image-20210427141652794"></strong></p><p><strong>点击进入,</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427141715202.png" alt="image-20210427141715202"></strong></p><p><strong>点击<code>Browse...</code>,选择要导入的包</strong></p><p><strong>出现如下警告:</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427141855856.png" alt="image-20210427141855856"></strong></p><p><strong>说明导入的包与你自己含有的包出现了工程重名</strong></p><p><strong>解决方案:</strong><br><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427142136966.png" alt="image-20210427142136966"></strong></p><p><strong>找到重名工程，如上操作，更改方程名</strong></p><p><strong>注意:更改包的文件名无效</strong></p><p><strong>其他部分注意事项:</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427142538123.png" alt="image-20210427142538123"></strong></p><p><strong>如果没有打钩,删除原包,会导致对应位置失去相应的包</strong></p><h4 id="从其他地方导入文件至指定包中"><a href="#从其他地方导入文件至指定包中" class="headerlink" title="从其他地方导入文件至指定包中"></a><strong>从其他地方导入文件至指定包中</strong></h4><p><strong>以<code>HelloJava.java</code>导入<code>com.atguigu.contact</code>为例</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427143525277.png" alt="image-20210427143525277"></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427143422823.png" alt="image-20210427143422823"></strong></p><p><strong>1.复制<code>HelloJava.java</code></strong></p><p><strong>2.选择<code>com.atguigu.contact</code>，ctrl+v即可</strong></p><p><strong>可能出现的问题:</strong></p><p><strong>1.乱码</strong></p><p><strong>解决方案:</strong></p><p><strong>1.<code>HelloJava.java</code>选择编码格式,变成utf-8,重新导入</strong></p><p><strong>2.用<code>Edit with Notepad++</code>打开<code>HelloJava.java</code>,选择格式,直接转换即可</strong></p><p><strong>2.开头不对应</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427144427863.png" alt="image-20210427144427863"></strong></p><p><strong>原因:写工程时,文件需要写明来源</strong></p><p><strong>解决方案:</strong></p><p><strong>最前面加上:<code>package+ 包名 +;</code></strong></p><h4 id="删除一个指定工程"><a href="#删除一个指定工程" class="headerlink" title="删除一个指定工程"></a><strong>删除一个指定工程</strong></h4><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427145226383.png" alt="image-20210427145226383"></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427145248290.png" alt="image-20210427145248290"></strong></p><p><strong>注意:如果钩上,这文件夹中的包也会被删除;如果没有钩上,只是将包导出,包的文件并未被删除</strong></p><h4 id="关闭暂时不需要的工程"><a href="#关闭暂时不需要的工程" class="headerlink" title="关闭暂时不需要的工程"></a><strong>关闭暂时不需要的工程</strong></h4><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427145837996.png"></strong></p><p><strong>如过需要打开,双击即可</strong></p><p><strong>如果需要不显示已经关闭了的工程:</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427150050432.png" alt="image-20210427150050432"></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427150130555.png" alt="image-20210427150130555"></strong></p><p><strong>勾选<code>Closed projects</code>,点击<code>OK</code>,即可</strong></p><p><strong>要显示被隐藏的工程:</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427150322178.png" alt="image-20210427150322178"></strong></p><h4 id="删除workplace中配置"><a href="#删除workplace中配置" class="headerlink" title="删除workplace中配置"></a><strong>删除workplace中配置</strong></h4><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427150717862.png" alt="image-20210427150717862"></strong></p><p><strong>里面保存着自己的配置</strong></p><h4 id="显示程序员的相关信息"><a href="#显示程序员的相关信息" class="headerlink" title="显示程序员的相关信息"></a><strong>显示程序员的相关信息</strong></h4><p><strong><code>Window--&gt;Preferences--&gt;Java--&gt;Code Style--&gt;Code Templates</code></strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427151732212.png" alt="image-20210427151732212"></strong></p><p><strong>设置好后,在需要注释的位置写上<code>/**</code>,点击<code>ENTER</code>,就会自动生成</strong></p><p><strong><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210427152637293.png" alt="image-20210427152637293"></strong></p><h4 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h4><p>以Arrays.sort()为例</p><p><code>ctrl+shift+t</code></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210509202827675.png" alt="image-20210509202827675"></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210509202911208.png" alt="image-20210509202911208"></p><p><code>ctrl+o</code></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210509202951517.png" alt="image-20210509202951517"></p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210509203041018.png" alt="image-20210509203041018"></p><p>注:<code>void</code>表明没有返回值</p><h3 id="部分报错原因"><a href="#部分报错原因" class="headerlink" title="部分报错原因"></a>部分报错原因</h3><p>1.<strong>如果定义的<code>class</code>名字在同一个包内,则会出现报错</strong></p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">file</span> collision<span class="token operator">:</span> A resource exists with a different <span class="token keyword">case</span><span class="token operator">:</span> <span class="token string">'/Sgg_JavaStudy/bin/com/atguigu/java/person.class'</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法:</p><p><strong>更改class名,或删除之前同名的方法</strong></p><p>2.</p><h1 id="java虚拟机"><a href="#java虚拟机" class="headerlink" title="java虚拟机"></a><strong>java虚拟机</strong></h1><h3 id="1-JVM"><a href="#1-JVM" class="headerlink" title="1.JVM"></a><strong>1.JVM</strong></h3><p>  <strong>运行.java文件翻译后的.class文件</strong></p><h3 id="2-Dalvik"><a href="#2-Dalvik" class="headerlink" title="2.Dalvik"></a><strong>2.Dalvik</strong></h3><p><strong>Android 4.4 及以前均为Dalvik虚拟机,只执行.dex文件,此时dx会将.class文件转换为Dalvik虚拟机执行的.dex文件。Dalvik虚拟机将.dex文件转换为快速运行的机器码。如果有多个文件，会有一个和包过程，导致app打开慢。</strong></p><h3 id="3-ART"><a href="#3-ART" class="headerlink" title="3.ART"></a><strong>3.ART</strong></h3><p><strong>Android 5.0 后开始使用，ART虚拟机必须兼容Dalvik虚拟机特性，但ART有一个很好的特性AOT(ahead of time)，这个特性就是在我们安装APK的时候，将dex直接处理成ART虚拟机使用的机器码</strong></p><h3 id="JDK-JRE-JVM关系"><a href="#JDK-JRE-JVM关系" class="headerlink" title="JDK,JRE,JVM关系"></a><strong>JDK,JRE,JVM关系</strong></h3><p><strong>JDK = JRE +Java的开发工具 (<code>java.exe</code>,<code>javac.exe</code>,<code>javadoc.exe</code>)</strong><br><strong>JRE = JVM + Java核心内库</strong></p><h3 id="配置path环境变量"><a href="#配置path环境变量" class="headerlink" title="配置path环境变量"></a><strong>配置path环境变量</strong></h3><p><strong>原因:希望在任何路径下都能执行java的开发工具，指令</strong><br><strong>配置:</strong><br><strong>JAVA_HOME = bin的上一层目录</strong><br><strong>path = %JAVA_HOME%\BIN</strong></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h3><p><strong>Application Programming Interface，应用程序编程接口</strong></p>]]></content>
      
      
      <categories>
          
          <category> 1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
